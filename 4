DROP TABLE report_date;
CREATE TABLE report_date AS (
SELECT DISTINCT MONTH_END(CALENDAR_DT) AS REPORT_DT FROM DDS.DIM_CALENDAR WHERE CALENDAR_DT BETWEEN DATE '2007-12-31' AND CURRENT_DATE - EXTRACT(DAY FROM CURRENT_DATE)
UNION SELECT CURRENT_DATE FROM dua
) WITH DATA PRIMARY INDEX (REPORT_DT);
COLLECT STATISTICS COLUMN REPORT_DT ON report_date;

DROP TABLE pos;
CREATE TABLE pos AS (
	WITH RECURSIVE hx (ORG_ID, ORG_RK, LVL, PARENT_ID, PARENT_RK) AS 
	(SELECT
	INTERNAL_ORG_ID, INTERNAL_ORG_RK, HIERARHY_LEVEL, PARENT_INTERNAL_ORG_ID, PARENT_INTERNAL_ORG_RK
		FROM DDS.INTERNAL_ORG_HIERARCHY
		WHERE (ORG_HIERARCHY_CD = 'ACCESS') AND (HIERARHY_LEVEL IN (2, 3)) 
		AND (CURRENT_DATE BETWEEN EFFECTIVE_FROM_DTTM AND EFFECTIVE_TO_DTTM) AND (DELETED_FLG = 0) AND (IS_ACTIVE_FLG = 1)
    
	UNION ALL  
	SELECT
	hx.ORG_ID, hx.ORG_RK, h.HIERARHY_LEVEL, h.PARENT_INTERNAL_ORG_ID, h.PARENT_INTERNAL_ORG_RK
		FROM hx
		JOIN DDS.INTERNAL_ORG_HIERARCHY h
		ON (h.INTERNAL_ORG_RK = hx.PARENT_RK) AND (h.ORG_HIERARCHY_CD = 'ACCESS') 
		AND (CURRENT_DATE BETWEEN h.EFFECTIVE_FROM_DTTM AND h.EFFECTIVE_TO_DTTM) AND (h.DELETED_FLG = 0) AND (h.IS_ACTIVE_FLG = 1)
	)

SELECT
b.INTERNAL_ORG_ID AS BRANCH_ID, b.INTERNAL_ORG_NM AS BRANCH_NM,  o.INTERNAL_ORG_ID AS OFFICE_ID, o.INTERNAL_ORG_NM AS OFFICE_NM, 
o.INTERNAL_ORG_TYPE_CD AS OFFICE_TYPE, p.INTERNAL_ORG_ID AS POS_ID, p.INTERNAL_ORG_NM AS POS_NM, p.INTERNAL_ORG_TYPE_CD AS POS_TYPE, 
p.DISTRICT_GEOGRAPHY_CD AS DISTRICT, p.REGION_GEOGRAPHY_CD AS REGION, p.MOSCOW_REGION_CD AS REGION_TYPE, p.CITY, x.ORG_ID, x.ORG_RK
	FROM
	(SELECT DISTINCT 
	ORG_ID, ORG_RK, COALESCE(MIN(POS_RK) OVER (PARTITION BY ORG_RK), ORG_RK) AS POS_RK, MIN(OFFICE_RK) OVER (PARTITION BY ORG_RK) AS OFFICE_RK
		FROM
  		(SELECT 
		x.*, CASE WHEN LVL = 2 THEN PARENT_RK END AS OFFICE_RK, CASE WHEN LVL = 3 THEN PARENT_RK END AS POS_RK
			FROM hx x
			JOIN DDS.INTERNAL_ORG o
			ON (o.INTERNAL_ORG_RK = x.PARENT_RK) AND (o.IS_ACTIVE_FLG = 1)
  		) x
	) x
 
	LEFT JOIN DDS.INTERNAL_ORG o
	ON (o.INTERNAL_ORG_RK = x.OFFICE_RK) AND (o.IS_ACTIVE_FLG = 1) 
	
	LEFT JOIN DDS.INTERNAL_ORG p
	ON (p.INTERNAL_ORG_RK = x.POS_RK) AND (p.IS_ACTIVE_FLG = 1)
	
	LEFT JOIN DDS.INTERNAL_ORG_HIERARCHY xb
	ON (xb.INTERNAL_ORG_RK = x.POS_RK) AND (xb.ORG_HIERARCHY_CD = 'СВОД') 
	AND (CURRENT_DATE BETWEEN xb.EFFECTIVE_FROM_DTTM AND xb.EFFECTIVE_TO_DTTM) AND (xb.DELETED_FLG = 0) AND (xb.IS_ACTIVE_FLG = 1)
	
	LEFT JOIN DDS.INTERNAL_ORG b
	ON (b.INTERNAL_ORG_RK = xb.PARENT_INTERNAL_ORG_RK) AND (b.IS_ACTIVE_FLG = 1)

UNION
SELECT
o.INTERNAL_ORG_ID AS BRANCH_ID, o.INTERNAL_ORG_NM AS BRANCH_NM, o.INTERNAL_ORG_ID AS OFFICE_ID, o.INTERNAL_ORG_NM AS OFFICE_NM, 
o.INTERNAL_ORG_TYPE_CD AS OFFICE_TYPE, o.INTERNAL_ORG_ID AS POS_ID, o.INTERNAL_ORG_NM AS POS_NM, o.INTERNAL_ORG_TYPE_CD AS POS_TYPE, 
o.DISTRICT_GEOGRAPHY_CD AS DISTRICT, o.REGION_GEOGRAPHY_CD AS REGION, o.MOSCOW_REGION_CD AS REGION_TYPE, o.CITY, b.ORG_ID, b.ORG_RK
	FROM
	(SELECT
	INTERNAL_ORG_ID AS ORG_ID, INTERNAL_ORG_RK AS ORG_RK
		FROM DDS.INTERNAL_ORG_HIERARCHY
		WHERE (ORG_HIERARCHY_CD = 'ACCESS') AND (HIERARHY_LEVEL = 1)
		AND (CURRENT_DATE BETWEEN EFFECTIVE_FROM_DTTM AND EFFECTIVE_TO_DTTM) AND (DELETED_FLG = 0) AND (IS_ACTIVE_FLG = 1)
	) b
	
	LEFT JOIN DDS.INTERNAL_ORG o
	ON (o.INTERNAL_ORG_RK = b.ORG_RK) AND (o.IS_ACTIVE_FLG = 1)	
) WITH DATA UNIQUE PRIMARY INDEX (ORG_RK);
COLLECT STATISTICS COLUMN ORG_RK ON pos;


DROP TABLE contract;
CREATE TABLE contract AS (
SELECT DISTINCT
c.AGREEMENT_RK, c.MIGRATION_AGREEMENT_RK, c.CONTRACT_TYPE_CD AS AGREEMENT_TYPE_CD, c.SOURCE_SYSTEM_CD AS BRANCH_ID, 
c.CONTRACT_ID, TRUNC(COALESCE(c.MIGRATION_OPEN_DT, c.ISSUE_DT), 'mm') AS GENERATION,
COALESCE(SUM(lim.CREDIT_LIMIT_AMT) OVER (PARTITION BY c.AGREEMENT_RK), c.CONTRACT_AMT) AS CONTRACT_AMT,
COALESCE(c.MIGRATION_OPEN_DT, c.OPEN_DT) AS OPEN_DT, COALESCE(c.MIGRATION_OPEN_DT, c.ISSUE_DT) AS ISSUE_DT,
COALESCE(c.INIT_INTERNAL_ORG_2_RK, c.INIT_INTERNAL_ORG_RK) AS POS_DEPT_RK,
CASE WHEN PERIOD_TYPE = 'дней' THEN c.CONTRACT_PERIOD
	WHEN c.CONTRACT_PERIOD IS NOT NULL THEN ADD_MONTHS(COALESCE(c.MIGRATION_OPEN_DT, c.ISSUE_DT), c.CONTRACT_PERIOD) - COALESCE(c.MIGRATION_OPEN_DT, c.ISSUE_DT)
	WHEN c.CONTRACT_PERIOD IS NULL AND CLOSE_PLAN_DT IS NOT NULL THEN CLOSE_PLAN_DT -  COALESCE(CASE WHEN OPEN_DT >= DATE '2005-01-01' THEN OPEN_DT END, c.MIGRATION_OPEN_DT, c.ISSUE_DT) 
END AS TERM, 
CASE WHEN c.CLOSE_DT < CURRENT_DATE THEN c.CLOSE_DT ELSE CLOSE_PLAN_DT END AS CLOSE_DT, r.RATE, c.PRODUCT_OPERATIONAL_ID AS PRODUCT_ID, 
c.PRODUCT_SUB_ID AS SUBPRODUCT_ID, po.PRODUCT_OPERATIONAL_NM AS PRODUCT_TYPE, c.PURPOSE_CD AS PURPOSE, c.CUSTOMER_RK, c.CUSTOMER_TYPE_CD, 
cu.CUSTOMER_GLOBAL_ID, cu.CUSTOMER_FULL_NM AS CUSTOMER_NM, cu.BIRTH_DT, cu.TAX_PAYER_NUM AS CUSTOMER_TIN, o.OKVED_DESC,
TD_SYSFNLIB.REGEXP_SUBSTR(TRIM(BOTH ',' FROM TRIM(ch.OKVED_CD)),'[^,]+') AS OKVED_CODE     
	FROM DDS.CONTRACT_LN c 
		
	LEFT JOIN DDS.AGREEMENT_CREDIT_LIMIT_HIST lim
	ON (lim.AGREEMENT_RK = c.AGREEMENT_RK) AND (lim.AGREEMENT_TYPE_CD = c.CONTRACT_TYPE_CD) AND (lim.START_DT = c.ISSUE_DT)
	AND (CURRENT_DATE BETWEEN lim.EFFECTIVE_FROM_DTTM AND lim.EFFECTIVE_TO_DTTM) AND (lim.DELETED_FLG = '0') AND (lim.IS_ACTIVE_FLG = '1')
    
	LEFT JOIN DDS.AGREEMENT_RATE_HIST r
	ON (r.AGREEMENT_RK = c.AGREEMENT_RK) AND (r.AGREEMENT_TYPE_CD = c.CONTRACT_TYPE_CD)
	AND (c.ISSUE_DT BETWEEN r.EFFECTIVE_FROM_DTTM AND r.EFFECTIVE_TO_DTTM) AND (r.DELETED_FLG = '0') AND (r.IS_ACTIVE_FLG = '1')
 
	LEFT JOIN DDS.PRODUCT_OPERATIONAL po
	ON (po.PRODUCT_OPERATIONAL_RK = c.PRODUCT_OPERATIONAL_RK)
	AND (CURRENT_DATE BETWEEN po.EFFECTIVE_FROM_DTTM AND po.EFFECTIVE_TO_DTTM) AND (po.DELETED_FLG = '0')
    
	LEFT JOIN DDS.CUSTOMER_GLOBAL_REGISTRY cu
	ON (cu.CUSTOMER_RK = c.CUSTOMER_RK) AND (cu.CUSTOMER_TYPE_CD = c.CUSTOMER_TYPE_CD)
	AND (CURRENT_DATE BETWEEN cu.EFFECTIVE_FROM_DTTM AND cu.EFFECTIVE_TO_DTTM) AND (cu.DELETED_FLG = '0')
    	 
	LEFT JOIN DDS.CORPORATE_HIST ch 
	ON (ch.CUSTOMER_RK = c.CUSTOMER_RK) AND (ch.CUSTOMER_TYPE_CD = c.CUSTOMER_TYPE_CD)
	AND (CURRENT_DATE BETWEEN ch.EFFECTIVE_FROM_DTTM AND ch.EFFECTIVE_TO_DTTM) AND (ch.DELETED_FLG = '0')
	
	LEFT JOIN DDS.DIM_OKVED o
	ON (o.OKVED_CD = TD_SYSFNLIB.REGEXP_SUBSTR(TRIM(BOTH ',' FROM TRIM(ch.OKVED_CD)),'[^,]+'))
	AND (CURRENT_DATE BETWEEN o.EFFECTIVE_FROM_DTTM AND o.EFFECTIVE_TO_DTTM) AND (o.DELETED_FLG = '0')
WHERE (c.CONTRACT_TYPE_CD = 'КРЕДИТ') AND (c.CONTRACT_STATUS_CD NOT IN ('АНКЛ', 'БВВД', 'БВВЗ', 'ВВЕД', 'ВВИВ', 'ВВРВ', 'ВВРД')) 
AND (c.PRODUCT_OPERATIONAL_ID IN ('МН', 'ПМ', 'ПШ', 'ПЭ', 'ПЯ', 'РЛ', 'РМ', 'РЦ', 'РЮ')) AND (c.TRANCHE_NUM IS NULL) AND (c.DELETED_FLG = '0')
) WITH DATA PRIMARY INDEX (AGREEMENT_RK);
COLLECT STATISTICS COLUMN AGREEMENT_RK, COLUMN BRANCH_ID, COLUMN ISSUE_DT ON contract;


----------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------pledge for portfolio---------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------
--Залоги
DROP TABLE pledge_cat;
CREATE TABLE pledge_cat AS (
SELECT
t.AGREEMENT_RK, p.SRC_NN, 
CASE 
	WHEN p.COLLATERAL_TYPE_CD IN ('3.4.1', '3.4.2', '3.4.3', '3.4.4','3.4.5') THEN 'Автотранспорт'
	WHEN p.COLLATERAL_TYPE_CD IN ('3.1.1', '3.1.1.1','3.1.1.10','3.1.1.11','3.1.1.17','3.1.1.2','3.1.1.33','3.1.1.4','3.1.1.56','3.1.1.57','3.1.1.58','3.1.1.59','3.1.1.60','3.1.1.61') THEN 'Иные имущественные права' 
	WHEN p.COLLATERAL_TYPE_CD IN ('3.6.11.1','3.6.11.2','3.6.11.4','3.6.12.1','3.6.12.2','3.6.12.3','3.6.12.4','3.6.5','3.6.5.1','3.6.5.2','3.6.6','3.6.6.1','3.6.6.2','3.6.7','3.6.7.1','3.6.7.2','3.6.9','3.6.9.1','3.6.9.2','3.6.9.3','3.8.11','3.8.2') THEN 'Жилая недвижимость' 
	WHEN p.COLLATERAL_TYPE_CD IN ('3.1.3','3.1.4','3.6.1','3.6.10','3.6.10.1','3.6.13.1','3.6.13.2','3.6.2','3.6.2.1','3.6.3','3.6.3.1','3.6.4','3.6.4.1','3.6.4.2','3.6.4.3','3.6.4.4','3.6.8','3.6.8.1','3.7.1','3.7.10','3.7.11','3.7.2','3.7.4','3.7.5','3.7.6','3.7.6.1','3.7.6.2','3.7.7','3.7.7.1','3.7.7.2','3.7.8','3.7.8.1','3.7.8.2','3.7.8.3','3.7.9','3.8.1','3.8.10','3.8.4','3.8.5','3.9.6') THEN 'Недвижимость'
	WHEN p.COLLATERAL_TYPE_CD IN ('3.5.1','3.5.2','3.5.3','3.5.4','3.5.5','3.5.6','3.5.7','3.5.9') THEN 'Оборудование'
	WHEN p.COLLATERAL_TYPE_CD IN ('3.4.6','3.4.7','3.7.3') THEN 'Специальный автотранспорт, самоходные машины'
	WHEN p.COLLATERAL_TYPE_CD IN ('3','3.2.1','3.2.10','3.2.11','3.2.2','3.2.3','3.2.4','3.2.5','3.2.6','3.2.7','3.2.8','3.2.9','3.3.1','3.3.2','3.3.3','3.3.4','3.3.5','3.3.6','3.3.7','3.3.8','3.5.8','3.9.1','3.9.2','3.9.4') THEN 'ТМЦ'
	WHEN p.COLLATERAL_TYPE_CD IN ('3.0.1','3.0.10','3.0.2','3.0.3','3.0.4','3.1.0.01','3.1.0.02') THEN 'ЦБ и вклады'
ELSE 'Другие' END AS PLEDGE_TYPE 
	FROM contract t
	
	JOIN DDS.AGREEMENT_PLEDGE_HIST p 
	ON ( t.AGREEMENT_RK = p.AGREEMENT_RK) AND (t.BRANCH_ID = p.SOURCE_SYSTEM_CD) AND (p.DELETED_FLG=0) AND (p.IS_ACTIVE_FLG=1)
) WITH DATA PRIMARY INDEX (AGREEMENT_RK, SRC_NN);
COLLECT STATISTICS COLUMN AGREEMENT_RK ON pledge_cat;

DROP TABLE pl_cnt;
CREATE TABLE pl_cnt AS (
SELECT 
AGREEMENT_RK,
SUM(CASE WHEN PLEDGE_TYPE =  'Автотранспорт' THEN 1 ELSE 0 END) AS TRANSPORT_PLEDGE,
SUM(CASE WHEN PLEDGE_TYPE =  'Иные имущественные права' THEN 1 ELSE 0 END) AS MATERRIGHTS_PLEDGE,
SUM(CASE WHEN PLEDGE_TYPE =  'Жилая недвижимость' THEN 1 ELSE 0 END) AS HOUSING_PLEDGE,
SUM(CASE WHEN PLEDGE_TYPE =  'Недвижимость' THEN 1 ELSE 0 END) AS ESTATE_PLEDGE,
SUM(CASE WHEN PLEDGE_TYPE =  'Оборудование' THEN 1 ELSE 0 END) AS EQUIPMENT_PLEDGE,
SUM(CASE WHEN PLEDGE_TYPE =  'Специальный автотранспорт, самоходные машины' THEN 1 ELSE 0 END) AS SPECTRANSPORT_PLEDGE,
SUM(CASE WHEN PLEDGE_TYPE =  'ТМЦ' THEN 1 ELSE 0 END) AS INVENTORY_PLEDGE,
SUM(CASE WHEN PLEDGE_TYPE =  'ЦБ и вклады' THEN 1 ELSE 0 END) AS DEPOSITS_PLEDGE,
SUM(CASE WHEN PLEDGE_TYPE =  'Другие' AND SRC_NN IS NOT NULL THEN 1 ELSE 0 END) AS OTHER_PLEDGES
	FROM pledge_cat
GROUP BY AGREEMENT_RK
) WITH DATA PRIMARY INDEX (AGREEMENT_RK);
COLLECT STATISTICS COLUMN AGREEMENT_RK ON pl_cnt;

DROP TABLE guarantee;
CREATE TABLE guarantee AS (
SELECT 
h.AGREEMENT_RK, COUNT(DISTINCT UPPER(h.GUARANTOR_NM)) AS GUARANTOR_CNT, 
MAX(CASE WHEN h.RN = 1 THEN h.GUARANTOR_NM ELSE NULL END) AS GUAR_1,  
MAX(CASE WHEN h.RN = 2 THEN h.GUARANTOR_NM ELSE NULL END) AS GUAR_2,  
MAX(CASE WHEN h.RN = 3 THEN h.GUARANTOR_NM ELSE NULL END) AS GUAR_3,  
MAX(CASE WHEN h.RN = 4 THEN h.GUARANTOR_NM ELSE NULL END) AS GUAR_4,  
MAX(CASE WHEN h.RN = 5 THEN h.GUARANTOR_NM ELSE NULL END) AS GUAR_5 
	FROM
	(SELECT 
	h.*, ROW_NUMBER() OVER(PARTITION BY h.AGREEMENT_RK ORDER BY h.GUARANTOR_NM) AS RN
		FROM 
		(SELECT DISTINCT
		h.AGREEMENT_RK AS AGREEMENT_RK, UPPER(h.GUARANTOR_NM) AS GUARANTOR_NM
			FROM DDS.AGREEMENT_GUARANTOR_HIST h 
			WHERE (h.DELETED_FLG = '0') AND (h.IS_ACTIVE_FLG = '1') AND (h.AGREEMENT_TYPE_CD IN ('КРЕДИТ','ЗАЯВКИ'))
		) h
	) h
GROUP BY h.AGREEMENT_RK
) WITH DATA PRIMARY INDEX (AGREEMENT_RK);
COLLECT STATISTICS COLUMN AGREEMENT_RK ON GUARANTEE;

---Свод
DROP TABLE pledge;
CREATE TABLE pledge AS (
SELECT 
c.AGREEMENT_RK, TRANSPORT_PLEDGE, MATERRIGHTS_PLEDGE, HOUSING_PLEDGE, ESTATE_PLEDGE, EQUIPMENT_PLEDGE, SPECTRANSPORT_PLEDGE, INVENTORY_PLEDGE, DEPOSITS_PLEDGE, OTHER_PLEDGES, 
COALESCE(g.GUARANTOR_CNT,0) AS GUARANTOR_CNT, g.GUAR_1 AS GUAR1_NM, g.GUAR_2 AS GUAR2_NM, g.GUAR_3 AS GUAR3_NM, g.GUAR_4 AS GUAR4_NM, g.GUAR_5 AS GUAR5_NM
	FROM (SELECT AGREEMENT_RK FROM contract GROUP BY 1) c
	LEFT JOIN pl_cnt t
	ON (c.AGREEMENT_RK = t.AGREEMENT_RK)
	LEFT JOIN guarantee g
	ON (c.AGREEMENT_RK = g.AGREEMENT_RK)
) WITH DATA PRIMARY INDEX (AGREEMENT_RK);
COLLECT STATISTICS COLUMN AGREEMENT_RK ON pledge;

----------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------end of pledge for portfolio----------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------


DROP TABLE remains;
CREATE TABLE remains AS (
SELECT
cl.REPORT_DT, cl.AGREEMENT_RK, SUM( - ab.BALANCE_AMT_NC) AS REMAINS_RUB
	FROM
	(SELECT 
	rd.REPORT_DT, c.AGREEMENT_RK
 		FROM report_date rd ------!!!!!!!!!!
		JOIN contract c
		ON (c.ISSUE_DT <= rd.REPORT_DT)
 
	UNION
	SELECT ISSUE_DT + 3 AS REPORT_DT, AGREEMENT_RK  FROM contract
	) cl
 
	JOIN DDS.ACCOUNT_ROLE_HIST ar
   ON (ar.AGREEMENT_RK = cl.AGREEMENT_RK) AND (ar.ACCOUNT_ROLE_CD = 'КРЕДН')
	AND (cl.REPORT_DT BETWEEN ar.EFFECTIVE_FROM_DTTM AND ar.EFFECTIVE_TO_DTTM) AND (ar.DELETED_FLG = '0') 
    
	JOIN DDS.ACCOUNT_BALANCE ab
	ON (ab.ACCOUNT_RK = ar.ACCOUNT_RK) AND (ab.BALANCE_AMT_NC < 0)
	AND (cl.REPORT_DT BETWEEN ab.PERIOD_FROM_DTTM AND ab.PERIOD_TO_DTTM)
GROUP BY cl.REPORT_DT, cl.AGREEMENT_RK
) WITH DATA PRIMARY INDEX (REPORT_DT, AGREEMENT_RK);


DROP TABLE customer_group;
CREATE TABLE customer_group AS (
SELECT
gl.REPORT_DT, gl.GROUP_ID, gh.CUSTOMER_GLOBAL_ID, gh.CUSTOMER_TYPE_CD, c.AGREEMENT_RK, 
c.CONTRACT_TYPE_CD AS AGREEMENT_TYPE_CD, c.PRODUCT_OPERATIONAL_ID AS PRODUCT_ID, r.REMAINS_RUB, 
COALESCE(b.PRI_BALANCE_RUR_AMT, 0) + COALESCE(b.OVERDUE_PRI_BALANCE_RUR_AMT, 0) AS DEBT_RUB 
	FROM
	(SELECT DISTINCT
	rd.REPORT_DT, gh.PARENT_ROW_ID AS GROUP_ID
		FROM report_date rd
		JOIN contract c
		ON (c.ISSUE_DT <= rd.REPORT_DT)
      
		JOIN DDS.CUSTOMER_CONNECTD_DEBTORS_HIST gh
		ON (gh.CUSTOMER_GLOBAL_ID = c.CUSTOMER_GLOBAL_ID) AND (gh.CUSTOMER_TYPE_CD = c.CUSTOMER_TYPE_CD)
		AND (rd.REPORT_DT BETWEEN gh.EFFECTIVE_FROM_DTTM AND gh.EFFECTIVE_TO_DTTM) AND (gh.DELETED_FLG = '0')
      
	UNION
   
	SELECT DISTINCT
	c.ISSUE_DT + 3 AS REPORT_DT, gh.PARENT_ROW_ID AS GROUP_ID
		FROM contract c
		JOIN DDS.CUSTOMER_CONNECTD_DEBTORS_HIST gh
		ON (gh.CUSTOMER_GLOBAL_ID = c.CUSTOMER_GLOBAL_ID) AND (gh.CUSTOMER_TYPE_CD = c.CUSTOMER_TYPE_CD)
      AND (c.ISSUE_DT + 3 BETWEEN gh.EFFECTIVE_FROM_DTTM AND gh.EFFECTIVE_TO_DTTM) AND (gh.DELETED_FLG = '0')
	) gl
 
	JOIN DDS.CUSTOMER_CONNECTD_DEBTORS_HIST gh
	ON (gh.PARENT_ROW_ID = gl.GROUP_ID) AND (gl.REPORT_DT BETWEEN gh.EFFECTIVE_FROM_DTTM AND gh.EFFECTIVE_TO_DTTM) AND (gh.DELETED_FLG = '0')
    
	LEFT JOIN DDS.CUSTOMER_GLOBAL_REGISTRY cu
	ON (cu.CUSTOMER_GLOBAL_ID = gh.CUSTOMER_GLOBAL_ID) AND (cu.CUSTOMER_TYPE_CD = gh.CUSTOMER_TYPE_CD) 
	AND (CURRENT_DATE BETWEEN cu.EFFECTIVE_FROM_DTTM AND cu.EFFECTIVE_TO_DTTM) AND (cu.DELETED_FLG = '0')
    
	JOIN DDS.CONTRACT_LN c
	ON (c.CUSTOMER_RK = cu.CUSTOMER_RK) AND (c.CUSTOMER_TYPE_CD = cu.CUSTOMER_TYPE_CD) 
	AND (COALESCE(c.MIGRATION_OPEN_DT, c.ISSUE_DT) <= gl.REPORT_DT) AND (c.CONTRACT_TYPE_CD = 'КРЕДИТ') 
	AND (c.TRANCHE_NUM IS NULL) AND (c.DELETED_FLG = '0')
    
	LEFT JOIN CDM.FCT_LOAN_BALANCE b
	ON (b.AGREEMENT_RK = c.AGREEMENT_RK) AND (gl.REPORT_DT BETWEEN b.EFFECTIVE_FROM_DTTM AND b.EFFECTIVE_TO_DTTM) AND (b.DELETED_FLG = '0')
    
	LEFT JOIN remains r
	ON (r.REPORT_DT = gl.REPORT_DT) AND (r.AGREEMENT_RK = c.AGREEMENT_RK)
WHERE (COALESCE(b.PRI_BALANCE_RUR_AMT, 0) + COALESCE(b.OVERDUE_PRI_BALANCE_RUR_AMT, 0) > 0) OR (r.REMAINS_RUB > 0)
) WITH DATA PRIMARY INDEX (REPORT_DT, AGREEMENT_RK);
COLLECT STATISTICS COLUMN ( REPORT_DT ) ON customer_group;
COLLECT STATISTICS COLUMN ( REPORT_DT, GROUP_ID ) ON customer_group;
COLLECT STATISTICS COLUMN ( REPORT_DT, CUSTOMER_GLOBAL_ID, CUSTOMER_TYPE_CD ) ON customer_group;

/*-----------------Судя по всему, эта таблица никому не нужна.

DROP TABLE customer_group2;
CREATE TABLE customer_group2 AS (
SELECT
cl.REPORT_DT, cl.CUSTOMER_GLOBAL_ID, cl.CUSTOMER_TYPE_CD, c.AGREEMENT_RK, 
c.CONTRACT_TYPE_CD AS AGREEMENT_TYPE_CD, c.PRODUCT_OPERATIONAL_ID AS PRODUCT_ID, r.REMAINS_RUB, 
COALESCE(b.PRI_BALANCE_RUR_AMT, 0) + COALESCE(b.OVERDUE_PRI_BALANCE_RUR_AMT, 0) AS DEBT_RUB
	FROM
	(SELECT DISTINCT
	rd.REPORT_DT, c.CUSTOMER_GLOBAL_ID, c.CUSTOMER_TYPE_CD
		FROM report_date rd
		JOIN contract c
		ON (c.ISSUE_DT <= rd.REPORT_DT)
      
  UNION
   
  SELECT DISTINCT
	c.ISSUE_DT + 3 AS REPORT_DT, c.CUSTOMER_GLOBAL_ID, c.CUSTOMER_TYPE_CD
		FROM contract c
	) cl
 
	LEFT JOIN DDS.CUSTOMER_GLOBAL_REGISTRY cu
	ON (cu.CUSTOMER_GLOBAL_ID = cl.CUSTOMER_GLOBAL_ID) AND (cu.CUSTOMER_TYPE_CD = cl.CUSTOMER_TYPE_CD)
	AND (CURRENT_DATE BETWEEN cu.EFFECTIVE_FROM_DTTM AND cu.EFFECTIVE_TO_DTTM) AND (cu.DELETED_FLG = '0') 

	JOIN DDS.CONTRACT_LN c
	ON (c.CUSTOMER_RK = cu.CUSTOMER_RK) 	AND (c.CUSTOMER_TYPE_CD = cu.CUSTOMER_TYPE_CD)
	AND (COALESCE(c.MIGRATION_OPEN_DT, c.ISSUE_DT) <= cl.REPORT_DT) AND (c.CONTRACT_TYPE_CD = 'КРЕДИТ') 
	AND (c.TRANCHE_NUM IS NULL) AND (c.DELETED_FLG = '0')
    
	LEFT JOIN CDM.FCT_LOAN_BALANCE b
	ON (b.AGREEMENT_RK = c.AGREEMENT_RK)
	AND (cl.REPORT_DT BETWEEN b.EFFECTIVE_FROM_DTTM AND b.EFFECTIVE_TO_DTTM) AND (b.DELETED_FLG = '0')
    
	LEFT JOIN remains r
	ON (r.REPORT_DT = cl.REPORT_DT) AND (r.AGREEMENT_RK = c.AGREEMENT_RK)   
WHERE (COALESCE(b.PRI_BALANCE_RUR_AMT, 0) + COALESCE(b.OVERDUE_PRI_BALANCE_RUR_AMT, 0) > 0) OR (r.REMAINS_RUB > 0)
) WITH DATA PRIMARY INDEX (AGREEMENT_RK);

---------------------*/

DROP TABLE voting;
CREATE TABLE voting AS (
SELECT
p.APPLICATION_AGREEMENT_RK AS APPLICATION_RK, p.APPLICATION_APP_PRT_TYPE_CD AS APPLICATION_TYPE_CD, p.AGREEMENT_RK AS PROTOCOL_RK, 
p.APP_PRT_TYPE_CD AS PROTOCOL_TYPE_CD, p.OPEN_DT AS DECISION_DT, coh.LPR_POSITION_CD AS POSITION_CD, coh.LPR_EMPLOYEE_NM AS EMPLOYEE_NM, 
coh.COMMITTEE_RESULT_INFO AS RES, coh.LPR_EMPLOYEE_NM || ' (' || coh.COMMITTEE_RESULT_INFO || ')' AS EMPLOYEE_RES,
CASE
	WHEN coh.LPR_POSITION_CD NOT IN ('КМБ_RM_1', 'КМБ_RM')
	THEN SUM(CASE WHEN coh.LPR_POSITION_CD NOT IN ('КМБ_RM_1', 'КМБ_RM') THEN 1 END) OVER (PARTITION BY p.APPLICATION_APP_PRT_TYPE_CD, p.APPLICATION_AGREEMENT_RK ORDER BY p.AGREEMENT_RK DESC, coh.MEMBER_NUM DESC ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)
END AS DM_RN,
SUM(CASE WHEN coh.LPR_POSITION_CD NOT IN ('КМБ_RM_1', 'КМБ_RM') THEN 1 END) OVER (PARTITION BY p.APPLICATION_APP_PRT_TYPE_CD, p.APPLICATION_AGREEMENT_RK ORDER BY p.AGREEMENT_RK DESC, coh.MEMBER_NUM DESC ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS DM_RN_CNT,
CASE
 WHEN coh.LPR_POSITION_CD IN ('КМБ_RM_1', 'КМБ_RM')
 THEN SUM(CASE WHEN coh.LPR_POSITION_CD IN ('КМБ_RM_1', 'КМБ_RM') THEN 1 END) OVER (PARTITION BY p.APPLICATION_APP_PRT_TYPE_CD, p.APPLICATION_AGREEMENT_RK ORDER BY p.AGREEMENT_RK DESC, coh.MEMBER_NUM DESC ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)
END AS RM_RN,
SUM(CASE WHEN coh.LPR_POSITION_CD IN ('КМБ_RM_1', 'КМБ_RM') THEN 1 END) OVER (PARTITION BY p.APPLICATION_APP_PRT_TYPE_CD, p.APPLICATION_AGREEMENT_RK ORDER BY p.AGREEMENT_RK DESC, coh.MEMBER_NUM DESC ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS RM_RN_CNT
	FROM DDS.APP_PRT p
 
	LEFT JOIN DDS.APP_PRT_CREDIT_COMMITTEE_HIST coh
	ON (coh.AGREEMENT_RK = p.AGREEMENT_RK) AND (coh.APP_PRT_TYPE_CD = p.APP_PRT_TYPE_CD)
	AND (CURRENT_DATE BETWEEN coh.EFFECTIVE_FROM_DTTM AND coh.EFFECTIVE_TO_DTTM) AND (coh.DELETED_FLG = '0')
WHERE (p.APP_PRT_TYPE_CD = 'ПРОТОКОЛ') AND p.PRODUCT_OPERATIONAL_ID IN ('МН', 'ПМ', 'ПШ', 'ПЭ', 'ПЯ', 'РЛ', 'РМ','РЦ', 'РЮ')
AND (p.APPLICATION_APP_PRT_TYPE_CD = 'ЗАЯВКИ') AND (CURRENT_DATE BETWEEN p.EFFECTIVE_FROM_DTTM AND p.EFFECTIVE_TO_DTTM) AND (p.DELETED_FLG = '0') 
) WITH DATA PRIMARY INDEX (APPLICATION_RK);

-------------------------------------------------------------------------------------------------------------------------------------------

DROP TABLE protocol_result;
CREATE TABLE protocol_result AS (
	WITH RECURSIVE co (APPLICATION_RK, APPLICATION_TYPE_CD, DM_RN, RM_RN, DM_LIST, RM_LIST) AS 
	(SELECT 
	APPLICATION_RK, APPLICATION_TYPE_CD, DM_RN, RM_RN, CASE WHEN DM_RN IS NOT NULL THEN EMPLOYEE_RES END AS DM_LIST, 
	CASE WHEN RM_RN IS NOT NULL THEN EMPLOYEE_RES END AS RM_LIST
		FROM voting 
	WHERE ((DM_RN = DM_RN_CNT) OR (RM_RN = RM_RN_CNT))
   
	UNION ALL
  
	SELECT 
	v.APPLICATION_RK, v.APPLICATION_TYPE_CD, v.DM_RN, v.RM_RN,
   CASE WHEN v.DM_RN IS NOT NULL THEN DM_LIST || CASE WHEN LENGTH(DM_LIST) > 0 THEN '; ' ELSE '' END || EMPLOYEE_RES END AS DM_LIST,
   CASE WHEN v.RM_RN IS NOT NULL THEN RM_LIST || CASE WHEN LENGTH(RM_LIST) > 0 THEN '; ' ELSE '' END || EMPLOYEE_RES END AS RM_LIST
		FROM co co
		JOIN voting v
		ON (v.APPLICATION_RK = co.APPLICATION_RK) AND (v.APPLICATION_TYPE_CD = co.APPLICATION_TYPE_CD) AND ((v.DM_RN = co.DM_RN - 1) OR (v.RM_RN = co.RM_RN - 1))
	)

	SELECT
	p.*, CASE WHEN LENGTH(rm.RM_LIST) > 0 THEN 1 END AS RM_FL, rm.RM_LIST, e.DM_LIST
		FROM
		(SELECT
		APPLICATION_RK, APPLICATION_TYPE_CD, MAX(DECISION_DT) AS DECISION_DT 
			FROM voting
		GROUP BY APPLICATION_RK, APPLICATION_TYPE_CD
 		) p
 
	LEFT JOIN co e
	ON (e.APPLICATION_RK = p.APPLICATION_RK) AND (e.APPLICATION_TYPE_CD = p.APPLICATION_TYPE_CD)  AND (e.DM_RN = 1)
    
	LEFT JOIN co rm
   ON (rm.APPLICATION_RK = p.APPLICATION_RK) AND (rm.APPLICATION_TYPE_CD = p.APPLICATION_TYPE_CD) AND (rm.RM_RN = 1)
) WITH DATA PRIMARY INDEX (APPLICATION_RK);

DROP TABLE application;
CREATE TABLE application AS (
SELECT
a.AGREEMENT_RK AS APPLICATION_RK, a.APP_PRT_TYPE_CD AS APPLICATION_TYPE_CD, TRUNC(a.OPEN_DT, 'mm') AS GENERATION,
a.SOURCE_SYSTEM_CD AS BRANCH_ID, a.APP_PRT_ID AS APPLICATION_ID, a.OPEN_DT AS APPLICATION_DT,
COALESCE(a.INTERNAL_ORG_2_RK, a.INTERNAL_ORG_RK) AS POS_DEPT_RK, COALESCE(fxr.WORKING_DAY_RATE, 1.0) * a.APP_PRT_AMT AS APPLICATION_AMT,
a.PRODUCT_OPERATIONAL_ID AS PRODUCT_ID, a.PRODUCT_SUB_ID AS SUBPRODUCT_ID, po.PRODUCT_OPERATIONAL_NM AS PRODUCT_TYPE, a.CUSTOMER_RK, a.CUSTOMER_TYPE_CD, 
cu.CUSTOMER_GLOBAL_ID, cu.CUSTOMER_FULL_NM AS CUSTOMER_NM, cu.TAX_PAYER_NUM AS CUSTOMER_TIN,
rch.AGREEMENT_RK, rch.AGREEMENT_TYPE_CD, pr.DECISION_DT, pr.RM_FL, pr.RM_LIST, pr.DM_LIST, lh.EMPLOYEE_LOGIN, lh.EMPLOYEE_NM
	FROM DDS.APP_PRT a
	LEFT JOIN DDS.PRODUCT_OPERATIONAL po
	ON (po.PRODUCT_OPERATIONAL_RK = a.PRODUCT_OPERATIONAL_RK)
	AND (CURRENT_DATE BETWEEN po.EFFECTIVE_FROM_DTTM AND po.EFFECTIVE_TO_DTTM) AND (po.DELETED_FLG = '0')
	
	LEFT JOIN DDS.CUSTOMER_GLOBAL_REGISTRY cu
	ON (cu.CUSTOMER_RK = a.CUSTOMER_RK) AND (cu.CUSTOMER_TYPE_CD = a.CUSTOMER_TYPE_CD) 
	AND (CURRENT_DATE BETWEEN cu.EFFECTIVE_FROM_DTTM AND cu.EFFECTIVE_TO_DTTM) AND (cu.DELETED_FLG = '0')
	
	LEFT JOIN CDM.FCT_FX_RATE fxr
	ON (fxr.CALENDAR_DT = a.OPEN_DT) AND (fxr.SRC_CURRENCY_RK = a.CURRENCY_RK) AND (fxr.TRG_CURRENCY_RK = 48) AND (fxr.DELETED_FLG = '0')

	LEFT JOIN DDS.AGREEMENT_RELATIONSHIP_HIST rch
	ON (rch.APPLICATION_AGREEMENT_RK = a.AGREEMENT_RK) AND (rch.APPLICATION_APP_PRT_TYPE_CD = 'ЗАЯВКИ') AND (rch.AGREEMENT_TYPE_CD = 'КРЕДИТ')
	AND (CURRENT_DATE BETWEEN rch.EFFECTIVE_FROM_DTTM AND rch.EFFECTIVE_TO_DTTM) AND (rch.DELETED_FLG = '0')

	LEFT JOIN protocol_result pr
	ON (pr.APPLICATION_RK = a.AGREEMENT_RK) AND (pr.APPLICATION_TYPE_CD = 'ЗАЯВКИ')
	
	LEFT JOIN  
	(SELECT
	s.AGREEMENT_RK, h.LOGIN_ID AS EMPLOYEE_LOGIN, COALESCE(h.EMPLOYEE_FULL_NM, h.EMPLOYEE_SHORT_NM) AS EMPLOYEE_NM
		FROM DDS.APP_PRT_STATUS_HISTORY s
		JOIN DDS.LOGIN_HIST h
      ON (h.LOGIN_RK = s.LOGIN_RK) AND (h.SOURCE_SYSTEM_CD = s.SOURCE_SYSTEM_CD) AND (s.INPUT_DT BETWEEN h.EFFECTIVE_FROM_DTTM AND h.EFFECTIVE_TO_DTTM) AND (h.DELETED_FLG = '0')
	WHERE  (s.APP_PRT_STATUS_CD IN ('БВЛ','БВЛ|БВЛ','БЗВ', 'БЗВ|БЗВ') OR s.PREV_APP_PRT_STATUS_CD IN ('БВЛ', 'БЗВ' )) AND (s.DELETED_FLG = '0')
	QUALIFY ROW_NUMBER() OVER (PARTITION BY s.AGREEMENT_RK ORDER BY s.STATUS_START_DTTM DESC) = 1
	) lh
	ON (lh.AGREEMENT_RK = a.AGREEMENT_RK)
WHERE (a.APP_PRT_TYPE_CD = 'ЗАЯВКИ') AND (a.PRODUCT_OPERATIONAL_ID IN ('МН', 'ПМ', 'ПШ', 'ПЭ', 'ПЯ', 'РЛ', 'РМ', 'РЦ', 'РЮ'))
AND (CURRENT_DATE BETWEEN a.EFFECTIVE_FROM_DTTM AND a.EFFECTIVE_TO_DTTM) AND (a.DELETED_FLG = '0')
QUALIFY ROW_NUMBER() OVER (PARTITION BY a.AGREEMENT_RK ORDER BY rch.KVIT_ID) = 1
) WITH DATA PRIMARY INDEX (APPLICATION_RK);


DROP TABLE portfolio2; 
CREATE TABLE portfolio2 AS (
SELECT
rd.REPORT_DT, pos.DISTRICT, pos.REGION, pos.CITY, pos.BRANCH_ID, pos.BRANCH_ID || ' ' || pos.BRANCH_NM AS BRANCH_NAME, pos.OFFICE_ID AS ROO_ID, pos.OFFICE_ID || ' ' || pos.OFFICE_NM AS ROO_NAME, 
pos.POS_ID, pos.POS_ID || ' ' || pos.POS_NM AS POS_NAME, pos.BRANCH_ID || c.CONTRACT_ID AS ID, pos.BRANCH_ID || a.APPLICATION_ID AS ID_APPL, c.AGREEMENT_RK, c.GENERATION, c.CONTRACT_ID,  c.CONTRACT_AMT, 
c.ISSUE_DT, c.MIGRATION_AGREEMENT_RK, a.APPLICATION_ID, a.DECISION_DT, a.RM_FL, a.RM_LIST, a.DM_LIST, c.TERM, c.CLOSE_DT, c.RATE, c.PRODUCT_ID, c.SUBPRODUCT_ID, c.PRODUCT_TYPE, c.PURPOSE, 
c.CUSTOMER_RK, c.CUSTOMER_TYPE_CD, c.CUSTOMER_GLOBAL_ID, c.CUSTOMER_NM, c.BIRTH_DT, c.CUSTOMER_TIN, COALESCE(b.PRI_BALANCE_RUR_AMT, 0) + COALESCE(b.OVERDUE_PRI_BALANCE_RUR_AMT, 0) AS DEBT_RUB_PRI,
COALESCE(b.PRI_BALANCE_RUR_AMT, 0) + COALESCE(b.OVERDUE_PRI_BALANCE_RUR_AMT, 0) + COALESCE(b.INT_BALANCE_RUR_AMT, 0) + COALESCE(b.OVERDUE_INT_BALANCE_RUR_AMT, 0) + COALESCE(b.OVL_BALANCE_AMT, 0) AS DEBT_RUB_AGG, 
r.REMAINS_RUB, a.EMPLOYEE_LOGIN, a.EMPLOYEE_NM, c.OKVED_CODE, c.OKVED_DESC
	FROM report_date rd
	JOIN contract c	ON (c.ISSUE_DT <= rd.REPORT_DT)
	LEFT JOIN CDM.FCT_LOAN_BALANCE b ON (b.AGREEMENT_RK = c.AGREEMENT_RK) AND (rd.REPORT_DT BETWEEN b.EFFECTIVE_FROM_DTTM AND b.EFFECTIVE_TO_DTTM) AND (b.DELETED_FLG = 0)
	LEFT JOIN remains r ON (r.REPORT_DT = rd.REPORT_DT) AND (r.AGREEMENT_RK = c.AGREEMENT_RK)
	LEFT JOIN pos pos ON (pos.ORG_RK = c.POS_DEPT_RK)
	LEFT JOIN application a ON (a.AGREEMENT_RK = c.AGREEMENT_RK) AND (a.AGREEMENT_TYPE_CD = c.AGREEMENT_TYPE_CD)
WHERE (COALESCE(b.PRI_BALANCE_RUR_AMT, 0) + COALESCE(b.OVERDUE_PRI_BALANCE_RUR_AMT, 0) > 0) OR (r.REMAINS_RUB > 0) OR
(COALESCE(b.PRI_BALANCE_RUR_AMT, 0) + COALESCE(b.OVERDUE_PRI_BALANCE_RUR_AMT, 0) + COALESCE(b.INT_BALANCE_RUR_AMT, 0) + COALESCE(b.OVERDUE_INT_BALANCE_RUR_AMT, 0) + COALESCE(b.OVL_BALANCE_AMT, 0) > 0)
) WITH DATA PRIMARY INDEX (REPORT_DT, AGREEMENT_RK);
COLLECT STATISTICS COLUMN agreement_rk ON portfolio2;

DROP TABLE ranges;
CREATE TABLE ranges AS (
	SELECT RANGE_BEGIN_DAYS_CNT, RANGE_END_DAYS_CNT, DELINQUENCY_RANGE_DESC, 'FIFO' AS DELINQUENCY_METHOD_CD FROM CDM.MREF_DELINQUENCY_RANGE WHERE DELETED_FLG = 0 AND IS_ACTIVE_FLG = 1 AND DELINQUENCY_RANGE_CD BETWEEN 821 AND 834
	UNION 
	SELECT 391, 999999, '390+', 'FIFO' FROM dua
	UNION
	SELECT RANGE_BEGIN_DAYS_CNT, RANGE_END_DAYS_CNT, DELINQUENCY_RANGE_DESC, 'LIFO' AS DELINQUENCY_METHOD_CD FROM CDM.MREF_DELINQUENCY_RANGE WHERE DELETED_FLG = 0 AND IS_ACTIVE_FLG = 1 AND DELINQUENCY_RANGE_CD BETWEEN 821 AND 824 
	UNION
	SELECT 91, 999999, '90+', 'LIFO' FROM dua
) WITH DATA;

DROP TABLE portfolio_agg;
CREATE TABLE portfolio_agg AS (
SELECT
p.*, dfi.DELINQUENCY_START_DT AS DELINQUENCY_AGG_FIFO_DT, (p.REPORT_DT - dfi.DELINQUENCY_START_DT) AS DELINQUENCY_AGG_FIFO_DAYS, 
rfi.DELINQUENCY_RANGE_DESC AS DELINQUENCY_AGG_FIFO_CLASS,

MONTHS_BETWEEN(TRUNC(dfi.DELINQUENCY_START_DT, 'mm'), TRUNC(p.ISSUE_DT, 'mm')) AS DELINQUENCY_AGG_FIFO_AGE, 
dli.DELINQUENCY_START_DT AS DELINQUENCY_AGG_LIFO_DT, (p.REPORT_DT - dli.DELINQUENCY_START_DT) AS DELINQUENCY_AGG_LIFO_DAYS, 
rli.DELINQUENCY_RANGE_DESC AS DELINQUENCY_AGG_LIFO_CLASS,

MONTHS_BETWEEN(TRUNC(dli.DELINQUENCY_START_DT, 'mm'), TRUNC(p.ISSUE_DT, 'mm')) AS DELINQUENCY_AGG_LIFO_AGE
	FROM
	(SELECT 
	REPORT_DT, AGREEMENT_RK, ISSUE_DT
		FROM portfolio2
	) p
 
	LEFT JOIN CDM.FCT_DELINQUENCY dfi
	ON (dfi.AGREEMENT_RK = p.AGREEMENT_RK) AND (dfi.DELINQUENCY_METHOD_CD = 'FIFO') AND (dfi.DELINQUENCY_TYPE_CD = 'AGG') 
	AND (p.REPORT_DT BETWEEN dfi.EFFECTIVE_FROM_DTTM AND dfi.EFFECTIVE_TO_DTTM) AND (dfi.OVERDUE_RUR_AMT > 0) AND (dfi.DELETED_FLG = '0')
    
	LEFT JOIN CDM.FCT_DELINQUENCY dli
	ON (dli.AGREEMENT_RK = p.AGREEMENT_RK) AND (dli.DELINQUENCY_METHOD_CD = 'LIFO') AND (dli.DELINQUENCY_TYPE_CD = 'AGG') 
	AND (p.REPORT_DT BETWEEN dli.EFFECTIVE_FROM_DTTM AND dli.EFFECTIVE_TO_DTTM) AND (dli.OVERDUE_RUR_AMT > 0) AND (dli.DELETED_FLG = '0')
	
	LEFT JOIN ranges rfi
	ON (COALESCE((p.REPORT_DT - dfi.DELINQUENCY_START_DT), -1) BETWEEN rfi.RANGE_BEGIN_DAYS_CNT AND rfi.RANGE_END_DAYS_CNT) 
	AND (dfi.DELINQUENCY_METHOD_CD = rfi.DELINQUENCY_METHOD_CD)
	
	LEFT JOIN ranges rli
	ON (COALESCE((p.REPORT_DT - dli.DELINQUENCY_START_DT), -1) BETWEEN rli.RANGE_BEGIN_DAYS_CNT AND rli.RANGE_END_DAYS_CNT)
	AND (dli.DELINQUENCY_METHOD_CD = rli.DELINQUENCY_METHOD_CD)
	
) WITH DATA PRIMARY INDEX (REPORT_DT, AGREEMENT_RK);


DROP TABLE portfolio_pri;
CREATE TABLE portfolio_pri AS (
SELECT
p.*, dfi.DELINQUENCY_START_DT AS DELINQUENCY_PRI_FIFO_DT, (p.REPORT_DT - dfi.DELINQUENCY_START_DT) AS DELINQUENCY_PRI_FIFO_DAYS,
rfi.DELINQUENCY_RANGE_DESC AS DELINQUENCY_PRI_FIFO_CLASS, 
MONTHS_BETWEEN(TRUNC(dfi.DELINQUENCY_START_DT, 'mm'), TRUNC(p.ISSUE_DT, 'mm')) AS DELINQUENCY_PRI_FIFO_AGE,

dli.DELINQUENCY_START_DT AS DELINQUENCY_PRI_LIFO_DT, (p.REPORT_DT - dli.DELINQUENCY_START_DT) AS DELINQUENCY_PRI_LIFO_DAYS,
rli.DELINQUENCY_RANGE_DESC AS DELINQUENCY_PRI_LIFO_CLASS, 
MONTHS_BETWEEN(TRUNC(dli.DELINQUENCY_START_DT, 'mm'), TRUNC(p.ISSUE_DT, 'mm')) AS DELINQUENCY_PRI_LIFO_AGE

	FROM
	(SELECT 
	REPORT_DT, AGREEMENT_RK, ISSUE_DT
		FROM portfolio2 
	) p
 
	LEFT JOIN CDM.FCT_DELINQUENCY dfi
	ON (dfi.AGREEMENT_RK = p.AGREEMENT_RK) AND (dfi.DELINQUENCY_METHOD_CD = 'FIFO') AND (dfi.DELINQUENCY_TYPE_CD = 'PRI') 
	AND (p.REPORT_DT BETWEEN dfi.EFFECTIVE_FROM_DTTM AND dfi.EFFECTIVE_TO_DTTM) AND (dfi.OVERDUE_RUR_AMT > 0) AND (dfi.DELETED_FLG = '0')
    
	LEFT JOIN CDM.FCT_DELINQUENCY dli
	ON (dli.AGREEMENT_RK = p.AGREEMENT_RK) AND (dli.DELINQUENCY_METHOD_CD = 'LIFO') AND (dli.DELINQUENCY_TYPE_CD = 'PRI') 
	AND (p.REPORT_DT BETWEEN dli.EFFECTIVE_FROM_DTTM AND dli.EFFECTIVE_TO_DTTM) AND (dli.OVERDUE_RUR_AMT > 0) AND (dli.DELETED_FLG = '0')
	
	LEFT JOIN ranges rfi
	ON (COALESCE((p.REPORT_DT - dfi.DELINQUENCY_START_DT), -1) BETWEEN rfi.RANGE_BEGIN_DAYS_CNT AND rfi.RANGE_END_DAYS_CNT) 
	AND (dfi.DELINQUENCY_METHOD_CD = rfi.DELINQUENCY_METHOD_CD)
	
	LEFT JOIN ranges rli
	ON (COALESCE((p.REPORT_DT - dli.DELINQUENCY_START_DT), -1) BETWEEN rli.RANGE_BEGIN_DAYS_CNT AND rli.RANGE_END_DAYS_CNT)
	AND (dli.DELINQUENCY_METHOD_CD = rli.DELINQUENCY_METHOD_CD)
	
) WITH DATA PRIMARY INDEX (AGREEMENT_RK);

DROP TABLE portfolio1;
CREATE TABLE portfolio1 AS (
SELECT
p.*, 
pp.DELINQUENCY_PRI_FIFO_DT, pp.DELINQUENCY_PRI_FIFO_CLASS, pp.DELINQUENCY_PRI_FIFO_DAYS, pp.DELINQUENCY_PRI_FIFO_AGE, 
pp.DELINQUENCY_PRI_LIFO_DT, pp.DELINQUENCY_PRI_LIFO_CLASS, pp.DELINQUENCY_PRI_LIFO_DAYS, pp.DELINQUENCY_PRI_LIFO_AGE, 
pa.DELINQUENCY_AGG_FIFO_DT, pa.DELINQUENCY_AGG_FIFO_CLASS, pa.DELINQUENCY_AGG_FIFO_DAYS, pa.DELINQUENCY_AGG_FIFO_AGE, 
pa.DELINQUENCY_AGG_LIFO_DT, pa.DELINQUENCY_AGG_LIFO_CLASS, pa.DELINQUENCY_AGG_LIFO_DAYS, pa.DELINQUENCY_AGG_LIFO_AGE 
	FROM portfolio2 p     
	LEFT JOIN portfolio_pri pp
	ON (pp.REPORT_DT = p.REPORT_DT) AND (pp.AGREEMENT_RK = p.AGREEMENT_RK)
	
	LEFT JOIN portfolio_agg pa
	ON (pa.REPORT_DT = p.REPORT_DT) AND (pa.AGREEMENT_RK = p.AGREEMENT_RK)
) WITH DATA PRIMARY INDEX (REPORT_DT, AGREEMENT_RK);


DROP TABLE portfolio;
CREATE TABLE portfolio AS (
SELECT
p.REPORT_DT, p.BRANCH_ID, p.CONTRACT_ID, p.ID, p.APPLICATION_ID, p.ID_APPL, p.POS_ID, p.POS_NAME, p.GENERATION, p.CONTRACT_AMT, p.ISSUE_DT,
p.TERM, p.CLOSE_DT, p.RATE, p.PRODUCT_ID, p.SUBPRODUCT_ID, p.CUSTOMER_NM, p.BIRTH_DT, p.DEBT_RUB_PRI, p.DEBT_RUB_AGG, 
p.DELINQUENCY_PRI_FIFO_CLASS, p.DELINQUENCY_PRI_FIFO_DAYS, p.DELINQUENCY_PRI_LIFO_CLASS, p.DELINQUENCY_PRI_LIFO_DAYS,
p.DELINQUENCY_AGG_FIFO_CLASS, p.DELINQUENCY_AGG_FIFO_DAYS, p.DELINQUENCY_AGG_LIFO_CLASS, p.DELINQUENCY_AGG_LIFO_DAYS,
p.EMPLOYEE_LOGIN, p.EMPLOYEE_NM,
CASE WHEN LENGTH(p.CUSTOMER_TIN) = 12 THEN 'ИП' WHEN LENGTH(p.CUSTOMER_TIN) = 10 THEN 'ООО' ELSE 'N/A' END AS ORG_FLG,

CASE WHEN (GUAR1_NM IS NOT NULL AND GUAR1_NM ^= UPPER(CUSTOMER_NM)) OR (GUAR2_NM IS NOT NULL AND GUAR2_NM ^= UPPER(CUSTOMER_NM)) 
OR (GUAR3_NM IS NOT NULL AND GUAR3_NM ^= UPPER(CUSTOMER_NM)) OR (GUAR4_NM IS NOT NULL AND GUAR4_NM ^= UPPER(CUSTOMER_NM)) 
OR (GUAR5_NM IS NOT NULL AND GUAR5_NM ^= UPPER(CUSTOMER_NM)) THEN 1 ELSE 0 END AS THIRD_PERS_FLG,
CASE WHEN pl.TRANSPORT_PLEDGE + pl.MATERRIGHTS_PLEDGE + pl.HOUSING_PLEDGE + pl.ESTATE_PLEDGE + pl.EQUIPMENT_PLEDGE 
+ pl.SPECTRANSPORT_PLEDGE + pl.INVENTORY_PLEDGE + pl.DEPOSITS_PLEDGE + pl.OTHER_PLEDGES > 0 THEN 1 ELSE 0 END AS PL_FLG,   
CASE WHEN pl.GUARANTOR_CNT > 0 THEN 1 ELSE 0 END AS GUAR_FLG, pl.GUARANTOR_CNT, pl.HOUSING_PLEDGE, pl.ESTATE_PLEDGE, 
pl.TRANSPORT_PLEDGE, pl.SPECTRANSPORT_PLEDGE, pl.EQUIPMENT_PLEDGE, pl.INVENTORY_PLEDGE, pl.DEPOSITS_PLEDGE, pl.MATERRIGHTS_PLEDGE, 
pl.OTHER_PLEDGES, p.OKVED_CODE, p.OKVED_DESC, p.CITY, p.DELINQUENCY_PRI_FIFO_DT, p.DELINQUENCY_PRI_FIFO_AGE, p.DELINQUENCY_PRI_LIFO_DT, 
p.DELINQUENCY_PRI_LIFO_AGE, p.DELINQUENCY_AGG_FIFO_DT, p.DELINQUENCY_AGG_FIFO_AGE, p.DELINQUENCY_AGG_LIFO_DT, p.DELINQUENCY_AGG_LIFO_AGE,

COALESCE(cud.DEBT_RUB, COALESCE(p.DEBT_RUB_PRI, 0) + COALESCE(p.REMAINS_RUB, 0)) AS CUSTOMER_DEBT_RUB_PRI,
COALESCE(cud.SME_DEBT_RUB, COALESCE(p.DEBT_RUB_PRI, 0) + COALESCE(p.REMAINS_RUB, 0)) AS CUSTOMER_DEBT_SME_RUB_PRI,
COALESCE(cud.DEBT_RUB, COALESCE(p.DEBT_RUB_AGG, 0) + COALESCE(p.REMAINS_RUB, 0)) AS CUSTOMER_DEBT_RUB_AGG,
COALESCE(cud.SME_DEBT_RUB, COALESCE(p.DEBT_RUB_AGG, 0) + COALESCE(p.REMAINS_RUB, 0)) AS CUSTOMER_DEBT_SME_RUB_AGG,
gh.PARENT_ROW_ID AS GROUP_ID, 
COALESCE(gd.DEBT_RUB, cud.DEBT_RUB, COALESCE(p.DEBT_RUB_PRI, 0) + COALESCE(p.REMAINS_RUB, 0)) AS GROUP_DEBT_RUB_PRI,
COALESCE(gd.SME_DEBT_RUB, cud.SME_DEBT_RUB,  COALESCE(p.DEBT_RUB_PRI, 0) + COALESCE(p.REMAINS_RUB, 0)) AS GROUP_DEBT_SME_RUB_PRI,
COALESCE(gd.DEBT_RUB, cud.DEBT_RUB, COALESCE(p.DEBT_RUB_AGG, 0) + COALESCE(p.REMAINS_RUB, 0)) AS GROUP_DEBT_RUB_AGG,
COALESCE(gd.SME_DEBT_RUB, cud.SME_DEBT_RUB, COALESCE(p.DEBT_RUB_AGG, 0) + COALESCE(p.REMAINS_RUB, 0)) AS GROUP_DEBT_SME_RUB_AGG,

p.DISTRICT, p.REGION, p.BRANCH_NAME, p.ROO_ID, p.ROO_NAME, p.AGREEMENT_RK, p.DECISION_DT, p.RM_FL, p.RM_LIST, p.DM_LIST, p.PRODUCT_TYPE, p.CUSTOMER_RK, p.CUSTOMER_TYPE_CD,
p.CUSTOMER_GLOBAL_ID, p.CUSTOMER_TIN, p.REMAINS_RUB, pl.GUAR1_NM, pl.GUAR2_NM, pl.GUAR3_NM, pl.GUAR4_NM, pl.GUAR5_NM, 
CAST('OPEN' AS VARCHAR(6)) AS STATUS, CAST(0 AS DECIMAL(20,5)) AS DISPOSAL_RUR_AMT, CAST(0 AS DECIMAL(20,5)) AS RECOVERY_RUR_AMT, 
CAST('' AS VARCHAR(12)) AS DISPOSAL_TYPE_CD, CAST(NULL AS DATE) AS DISPOSAL_DT, CAST(0 AS DECIMAL(20,5)) AS OVERDUE_PRI_BALANCE_RUR_AMT, p.MIGRATION_AGREEMENT_RK
	FROM portfolio1 p
	LEFT JOIN DDS.CUSTOMER_CONNECTD_DEBTORS_HIST gh
	ON (gh.CUSTOMER_GLOBAL_ID = p.CUSTOMER_GLOBAL_ID) AND (gh.CUSTOMER_TYPE_CD = p.CUSTOMER_TYPE_CD)
	AND (p.REPORT_DT BETWEEN gh.EFFECTIVE_FROM_DTTM AND gh.EFFECTIVE_TO_DTTM) AND (gh.DELETED_FLG = 0)
    
	LEFT JOIN
	(SELECT
	REPORT_DT, GROUP_ID, COALESCE(SUM(DEBT_RUB), 0) + COALESCE(SUM(REMAINS_RUB), 0) AS DEBT_RUB, 
	COALESCE(SUM(CASE WHEN PRODUCT_ID IN ('МН', 'ПМ', 'ПШ', 'ПЭ', 'ПЯ', 'РЛ', 'РМ','РЦ', 'РЮ') THEN DEBT_RUB END), 0) 
	+ COALESCE (SUM(CASE WHEN PRODUCT_ID IN ('МН', 'ПМ', 'ПШ', 'ПЭ', 'ПЯ', 'РЛ', 'РМ','РЦ', 'РЮ') THEN REMAINS_RUB END), 0) AS SME_DEBT_RUB
   	FROM customer_group
   GROUP BY REPORT_DT, GROUP_ID
	) gd
   ON (gd.REPORT_DT = p.REPORT_DT) AND (gd.GROUP_ID = gh.PARENT_ROW_ID)
    
	LEFT JOIN
	(SELECT
   REPORT_DT, CUSTOMER_GLOBAL_ID, CUSTOMER_TYPE_CD, COALESCE(SUM(DEBT_RUB), 0) + COALESCE(SUM(REMAINS_RUB), 0) AS DEBT_RUB, 
   COALESCE(SUM(CASE WHEN PRODUCT_ID IN ('МН', 'ПМ', 'ПШ', 'ПЭ', 'ПЯ', 'РЛ', 'РМ','РЦ', 'РЮ') THEN DEBT_RUB END), 0)
   + COALESCE (SUM(CASE WHEN PRODUCT_ID IN ('МН', 'ПМ', 'ПШ', 'ПЭ', 'ПЯ', 'РЛ', 'РМ','РЦ', 'РЮ') THEN REMAINS_RUB END), 0) AS SME_DEBT_RUB
   	FROM customer_group
   GROUP BY REPORT_DT, CUSTOMER_GLOBAL_ID, CUSTOMER_TYPE_CD
	) cud
   ON (cud.REPORT_DT = p.REPORT_DT) AND (cud.CUSTOMER_GLOBAL_ID = p.CUSTOMER_GLOBAL_ID) AND (cud.CUSTOMER_TYPE_CD = p.CUSTOMER_TYPE_CD)

	LEFT JOIN pledge pl
   ON (pl.AGREEMENT_RK = p.AGREEMENT_RK)
) WITH DATA PRIMARY INDEX (AGREEMENT_RK);


DROP TABLE tmp_disposal;
CREATE TABLE tmp_disposal AS (
SELECT
q.AGREEMENT_RK, c.CONTRACT_ID, c.SOURCE_SYSTEM_CD AS BRANCH_ID, q.REPORT_MONTH, q.ENTRY_DT, q.GROUP_080, q.DISPOSAL_TYPE_CD, 
q.CURRENCY_ISO_CD, q.PRI_BALANCE_RUR_AMT, q.OVERDUE_PRI_BALANCE_RUR_AMT, q.DISPOSAL_RUR_AMT, q.RECOVERY_RUR_AMT, 
q.PRI_BALANCE_AMT, q.OVERDUE_PRI_BALANCE_AMT, q.DISPOSAL_AMT, q.RECOVERY_AMT
	FROM  
	(SELECT
	iss.AGREEMENT_RK, iss.ENTRY_DT,
	(TRIM(CAST(CAST(e2.ANALYTIC_TASK_CD AS INTEGER FORMAT '9(3)') AS VARCHAR(3))) ||'.'||TRIM(CAST(CAST(e2.PRODUCT_ANALYTIC_CD AS INTEGER FORMAT '9(3)') AS VARCHAR(3))) ||'. '||e3.PRODUCT_ANALYTIC_DESC) AS GROUP_080,
	MONTH_END(iss.ENTRY_DT) AS REPORT_MONTH, iss.DISPOSAL_TYPE_CD, iss.CURRENCY_ISO_CD, iss.PRI_BALANCE_RUR_AMT, iss.OVERDUE_PRI_BALANCE_RUR_AMT, 
	iss.DISPOSAL_RUR_AMT, iss.RECOVERY_RUR_AMT, iss.PRI_BALANCE_AMT, iss.OVERDUE_PRI_BALANCE_AMT, iss.DISPOSAL_AMT, iss.RECOVERY_AMT
		FROM cdm.FCT_LOAN_DISPOSAL iss

		INNER JOIN (
		SELECT AGREEMENT_RK, PRODUCT_ACTUAL_CD, START_DT, FINISH_DT 	FROM CDM.CD_AGREEMENT_PRODUCT_ACTUAL WHERE (IS_ACTIVE_FLG= '1') AND (DELETED_FLG = '0') 
		) E1                 
		ON (ISS.AGREEMENT_RK = E1.AGREEMENT_RK) AND (iss.ENTRY_DT BETWEEN E1.START_DT AND E1.FINISH_DT) AND (iss.DELETED_FLG = '0')
   
		INNER JOIN (
		SELECT PRODUCT_ACTUAL_CD, ANALYTIC_TASK_CD, PRODUCT_ANALYTIC_CD FROM CDM.MREF_PRODUCT_ANALYTIC_STRUCTUR 
		WHERE (IS_ACTIVE_FLG= '1') AND (DELETED_FLG = '0') AND (ANALYTIC_TASK_CD = 80)
		) E2
		ON (E1.PRODUCT_ACTUAL_CD= E2.PRODUCT_ACTUAL_CD)
	
		INNER JOIN (
		SELECT PRODUCT_ANALYTIC_CD, PRODUCT_ANALYTIC_DESC FROM CDM.MREF_PRODUCT_ANALYTIC 	WHERE (IS_ACTIVE_FLG= '1') AND (DELETED_FLG = '0')
		) E3
		ON (E2.PRODUCT_ANALYTIC_CD= E3.PRODUCT_ANALYTIC_CD)
   ) q
   
   LEFT JOIN DDS.CONTRACT_LN c 
   ON (q.AGREEMENT_RK = c.AGREEMENT_RK)
WHERE (q.GROUP_080 IN ('080.058. Коммерсант ФЛ', '080.057. Коммерсант ЮЛ', '080.557. Коммерсант ЮЛ. Реструктуризация')) AND (c.CONTRACT_TYPE_CD = 'КРЕДИТ')
AND (c.CONTRACT_STATUS_CD ^= 'ВВЕД') AND (c.TRANCHE_NUM IS NULL) AND (c.DELETED_FLG = '0')
) WITH DATA PRIMARY INDEX (AGREEMENT_RK);

INSERT INTO portfolio
(REPORT_DT, BRANCH_ID, CONTRACT_ID, ID, APPLICATION_ID, ID_APPL, POS_ID, POS_NAME, GENERATION, CONTRACT_AMT, ISSUE_DT, TERM, CLOSE_DT, RATE, PRODUCT_ID, SUBPRODUCT_ID, 
CUSTOMER_NM, BIRTH_DT, DEBT_RUB_PRI, DEBT_RUB_AGG, DELINQUENCY_PRI_FIFO_CLASS, DELINQUENCY_PRI_FIFO_DAYS, DELINQUENCY_PRI_LIFO_CLASS, DELINQUENCY_PRI_LIFO_DAYS, 
DELINQUENCY_AGG_FIFO_CLASS, DELINQUENCY_AGG_FIFO_DAYS, DELINQUENCY_AGG_LIFO_CLASS, DELINQUENCY_AGG_LIFO_DAYS, EMPLOYEE_LOGIN, EMPLOYEE_NM, ORG_FLG, THIRD_PERS_FLG, PL_FLG, 
GUAR_FLG, GUARANTOR_CNT, HOUSING_PLEDGE, ESTATE_PLEDGE, TRANSPORT_PLEDGE, SPECTRANSPORT_PLEDGE, EQUIPMENT_PLEDGE, INVENTORY_PLEDGE, DEPOSITS_PLEDGE, MATERRIGHTS_PLEDGE, 
OTHER_PLEDGES, OKVED_CODE, OKVED_DESC, CITY, DELINQUENCY_PRI_FIFO_DT, DELINQUENCY_PRI_FIFO_AGE, DELINQUENCY_PRI_LIFO_DT, DELINQUENCY_PRI_LIFO_AGE, DELINQUENCY_AGG_FIFO_DT, 
DELINQUENCY_AGG_FIFO_AGE, DELINQUENCY_AGG_LIFO_DT, DELINQUENCY_AGG_LIFO_AGE, CUSTOMER_DEBT_RUB_PRI, CUSTOMER_DEBT_SME_RUB_PRI, CUSTOMER_DEBT_RUB_AGG, 
CUSTOMER_DEBT_SME_RUB_AGG, GROUP_ID, GROUP_DEBT_RUB_PRI, GROUP_DEBT_SME_RUB_PRI, GROUP_DEBT_RUB_AGG, GROUP_DEBT_SME_RUB_AGG, DISTRICT, REGION, BRANCH_NAME, ROO_ID, 
ROO_NAME, AGREEMENT_RK, DECISION_DT, RM_FL, RM_LIST, DM_LIST, PRODUCT_TYPE, CUSTOMER_RK, CUSTOMER_TYPE_CD, CUSTOMER_GLOBAL_ID, CUSTOMER_TIN, REMAINS_RUB, GUAR1_NM, GUAR2_NM, GUAR3_NM, 
GUAR4_NM, GUAR5_NM, STATUS, DISPOSAL_RUR_AMT, RECOVERY_RUR_AMT, DISPOSAL_TYPE_CD, DISPOSAL_DT, OVERDUE_PRI_BALANCE_RUR_AMT, MIGRATION_AGREEMENT_RK)

SELECT
REPORT_MONTH AS REPORT_DT, BRANCH_ID, CONTRACT_ID, ID, APPLICATION_ID, ID_APPL, POS_ID, POS_NAME, GENERATION, CONTRACT_AMT, ISSUE_DT, TERM, CLOSE_DT,
RATE, PRODUCT_ID, SUBPRODUCT_ID, CUSTOMER_NM, BIRTH_DT, NULL AS DEBT_RUB_PRI, NULL AS DEBT_RUB_AGG, NULL AS DELINQUENCY_PRI_FIFO_CLASS,
NULL AS DELINQUENCY_PRI_FIFO_DAYS, NULL AS DELINQUENCY_PRI_LIFO_CLASS, NULL AS DELINQUENCY_PRI_LIFO_DAYS, NULL AS DELINQUENCY_AGG_FIFO_CLASS,
NULL AS DELINQUENCY_AGG_FIFO_DAYS, NULL AS DELINQUENCY_AGG_LIFO_CLASS, NULL AS DELINQUENCY_AGG_LIFO_DAYS, 
EMPLOYEE_LOGIN, EMPLOYEE_NM, ORG_FLG, THIRD_PERS_FLG, PL_FLG, GUAR_FLG, GUARANTOR_CNT, HOUSING_PLEDGE, ESTATE_PLEDGE, TRANSPORT_PLEDGE, 
SPECTRANSPORT_PLEDGE, EQUIPMENT_PLEDGE, INVENTORY_PLEDGE, DEPOSITS_PLEDGE, MATERRIGHTS_PLEDGE, OTHER_PLEDGES, OKVED_CODE, OKVED_DESC, CITY,
NULL AS DELINQUENCY_PRI_FIFO_DT, NULL AS DELINQUENCY_PRI_FIFO_AGE, NULL AS DELINQUENCY_PRI_LIFO_DT, NULL AS DELINQUENCY_PRI_LIFO_AGE,
NULL AS DELINQUENCY_AGG_FIFO_DT, NULL AS DELINQUENCY_AGG_FIFO_AGE, NULL AS DELINQUENCY_AGG_LIFO_DT, NULL AS DELINQUENCY_AGG_LIFO_AGE,
NULL AS CUSTOMER_DEBT_RUB_PRI, NULL AS CUSTOMER_DEBT_SME_RUB_PRI, NULL AS CUSTOMER_DEBT_RUB_AGG, NULL AS CUSTOMER_DEBT_SME_RUB_AGG,
GROUP_ID, NULL AS GROUP_DEBT_RUB_PRI, NULL AS GROUP_DEBT_SME_RUB_PRI, NULL AS GROUP_DEBT_RUB_AGG, NULL AS GROUP_DEBT_SME_RUB_AGG,
DISTRICT, REGION, BRANCH_NAME, ROO_ID, ROO_NAME, P.AGREEMENT_RK, DECISION_DT, RM_FL, RM_LIST, DM_LIST, PRODUCT_TYPE, CUSTOMER_RK, CUSTOMER_TYPE_CD, 
CUSTOMER_GLOBAL_ID, CUSTOMER_TIN, NULL AS REMAINS_RUB, GUAR1_NM, GUAR2_NM, GUAR3_NM, GUAR4_NM, GUAR5_NM, 'CLOSED' AS STATUS,
d.DISPOSAL_RUR_AMT, d.RECOVERY_RUR_AMT, d.DISPOSAL_TYPE_CD, d.ENTRY_DT, d.OVERDUE_PRI_BALANCE_RUR_AMT, p.MIGRATION_AGREEMENT_RK
	FROM
	(SELECT p.* 
		FROM portfolio p
		JOIN tmp_disposal d
		ON (p.AGREEMENT_RK = d.AGREEMENT_RK)
	QUALIFY ROW_NUMBER() OVER (PARTITION BY p.AGREEMENT_RK ORDER BY p.REPORT_DT DESC) = 1
	) p 

	LEFT JOIN
	(SELECT DISTINCT 
	AGREEMENT_RK, REPORT_MONTH, ENTRY_DT, DISPOSAL_RUR_AMT, DISPOSAL_TYPE_CD, RECOVERY_RUR_AMT, OVERDUE_PRI_BALANCE_RUR_AMT
		FROM tmp_disposal
	) d
	ON (p.AGREEMENT_RK = d.AGREEMENT_RK) 
;


/*
GRANT SELECT ON yastrebovaas.portfolio TO Starykhsv;

CREATE TABLE yastrebovaas.portf_an AS
(SELECT * FROM yastrebovaas.portfolio
WHERE report_dt>'2015-01-01')
WITH DATA;
*/

 

/*
DROP TABLE Z_20160818_001;
DROP TABLE Z_20160818_002;
DROP TABLE Z_20160818_003;
DROP TABLE Z_20160818_004;
DROP TABLE Z_20160818_005;
DROP TABLE Z_20160818_006;
DROP TABLE Z_20160818_007;
DROP TABLE Z_20160818_008;
DROP TABLE Z_20160818_009;
*/
CREATE MULTISET TABLE Z_20160818_002 AS
(
SELECT
	AGR.AGREEMENT_RK, AGR.GENERATION_DT, 
	CASE
		WHEN PAS.PRODUCT_ANALYTIC_CD IN ('57','557') THEN 'Коммерсант ЮЛ'
		WHEN PAS.PRODUCT_ANALYTIC_CD IN ('58','72','558') THEN 'Коммерсант ФЛ'
	ELSE '-' END SEGMENT
FROM CDM.AGG_LOAN_ISSUE_DAR AGR
INNER JOIN CDM.MREF_PRODUCT_ANALYTIC_STRUCTUR PAS
	ON PAS.PRODUCT_ACTUAL_CD = AGR.PRODUCT_ACTUAL_CD
		AND CURRENT_DATE BETWEEN PAS.EFFECTIVE_FROM_DTTM AND PAS.EFFECTIVE_TO_DTTM
		AND PAS.DELETED_FLG = '0'
		AND PAS.ANALYTIC_TASK_CD = '80'
		AND PAS.PRODUCT_ANALYTIC_CD IN ('57','557','58','72','558')
)
WITH DATA
PRIMARY INDEX (AGREEMENT_RK);
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- отбираем балансы и просрочки
CREATE MULTISET TABLE Z_20160818_003 AS
(
SELECT
	B.REPORT_DT+1 REPORT_DT,
	A.AGREEMENT_RK, A.GENERATION_DT,
	B.CURRENCY_ISO_CD CURRENCY,
	B.EXCHANGE_TO_RUR_RATE EXCHANGE_RATE,
	SUM((B.PRI_BALANCE_AMT+B.OVERDUE_PRI_BALANCE_AMT)*B.EXCHANGE_TO_RUR_RATE) BALANCE_RUR,
	SUM(B.PRI_BALANCE_AMT+B.OVERDUE_PRI_BALANCE_AMT) BALANCE,
	CASE
		WHEN MAX(CASE WHEN COALESCE(B.OVERDUE_AGG_BALANCE_AMT,B.OVERDUE_PRI_BALANCE_AMT) = 0 THEN -1 ELSE COALESCE(B.DPD_FIFO_AGG_CNT,B.DPD_FIFO_PRI_CNT) END) < 0 THEN '0'
		WHEN MAX(CASE WHEN COALESCE(B.OVERDUE_AGG_BALANCE_AMT,B.OVERDUE_PRI_BALANCE_AMT) = 0 THEN -1 ELSE COALESCE(B.DPD_FIFO_AGG_CNT,B.DPD_FIFO_PRI_CNT) END) < 31 THEN '1-30'
		WHEN MAX(CASE WHEN COALESCE(B.OVERDUE_AGG_BALANCE_AMT,B.OVERDUE_PRI_BALANCE_AMT) = 0 THEN -1 ELSE COALESCE(B.DPD_FIFO_AGG_CNT,B.DPD_FIFO_PRI_CNT) END) < 61 THEN '31-60'
		WHEN MAX(CASE WHEN COALESCE(B.OVERDUE_AGG_BALANCE_AMT,B.OVERDUE_PRI_BALANCE_AMT) = 0 THEN -1 ELSE COALESCE(B.DPD_FIFO_AGG_CNT,B.DPD_FIFO_PRI_CNT) END) < 91 THEN '61-90'
	ELSE 'более 90' END DPD_LEVEL,		
	MAX(CASE WHEN COALESCE(B.OVERDUE_AGG_BALANCE_AMT,B.OVERDUE_PRI_BALANCE_AMT) = 0 THEN -1 ELSE COALESCE(B.DPD_FIFO_AGG_CNT,B.DPD_FIFO_PRI_CNT) END) DAYS
FROM Z_20160818_002 A
INNER JOIN CDM.AGG_LOAN_PORTFOLIO B
	ON A.AGREEMENT_RK = B.MIGR_ROOT_AGREEMENT_RK
		AND B.REPORT_DT >= '2007-12-31'
		AND EXTRACT(MONTH FROM B.REPORT_DT) IN (3,6,9,12)
		AND B.PRI_BALANCE_AMT+B.OVERDUE_PRI_BALANCE_AMT > 0
GROUP BY 1,2,3,4,5
)
WITH DATA
PRIMARY INDEX (AGREEMENT_RK)
INDEX (REPORT_DT);
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- отбираем балансы и просрочки через 12 месяцев
CREATE MULTISET TABLE Z_20160818_004 AS
(
SELECT
	'12' MONTHS,
	A.REPORT_DT,
	A.AGREEMENT_RK, A.GENERATION_DT,
	A.DPD_LEVEL,
	A.BALANCE_RUR BALANCE,
	ADD_MONTHS(A.REPORT_DT,12) REPORT_DT_NEW,
	COALESCE(B.DPD_LEVEL,'0') DPD_LEVEL_NEW,
	COALESCE(B.BALANCE,0)*A.EXCHANGE_RATE BALANCE_NEW
FROM Z_20160818_003 A
LEFT JOIN Z_20160818_003 B
	ON A.AGREEMENT_RK = B.AGREEMENT_RK
		AND ADD_MONTHS(A.REPORT_DT,12) = B.REPORT_DT
WHERE ADD_MONTHS(A.REPORT_DT,12) < CURRENT_DATE
)
WITH DATA
PRIMARY INDEX (AGREEMENT_RK)
INDEX (REPORT_DT);
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- отбираем балансы и просрочки через 6 месяцев
CREATE MULTISET TABLE Z_20160818_005 AS
(
SELECT
	'6' MONTHS,
	A.REPORT_DT,
	A.AGREEMENT_RK, A.GENERATION_DT,
	A.DPD_LEVEL,
	A.BALANCE_RUR BALANCE,
	ADD_MONTHS(A.REPORT_DT,6) REPORT_DT_NEW,
	COALESCE(B.DPD_LEVEL,'0') DPD_LEVEL_NEW,
	COALESCE(B.BALANCE,0)*A.EXCHANGE_RATE BALANCE_NEW
FROM Z_20160818_003 A
LEFT JOIN Z_20160818_003 B
	ON A.AGREEMENT_RK = B.AGREEMENT_RK
		AND ADD_MONTHS(A.REPORT_DT,6) = B.REPORT_DT
WHERE ADD_MONTHS(A.REPORT_DT,6) < CURRENT_DATE
)
WITH DATA
PRIMARY INDEX (AGREEMENT_RK)
INDEX (REPORT_DT);
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- отбираем балансы и просрочки через 3 месяца
CREATE MULTISET TABLE Z_20160818_006 AS
(
SELECT
	'3' MONTHS,
	A.REPORT_DT,
	A.AGREEMENT_RK, A.GENERATION_DT,
	A.DPD_LEVEL,
	A.BALANCE_RUR BALANCE,
	ADD_MONTHS(A.REPORT_DT,3) REPORT_DT_NEW,
	COALESCE(B.DPD_LEVEL,'0') DPD_LEVEL_NEW,
	COALESCE(B.BALANCE,0)*A.EXCHANGE_RATE BALANCE_NEW
FROM Z_20160818_003 A
LEFT JOIN Z_20160818_003 B
	ON A.AGREEMENT_RK = B.AGREEMENT_RK
		AND ADD_MONTHS(A.REPORT_DT,3) = B.REPORT_DT
WHERE ADD_MONTHS(A.REPORT_DT,3) < CURRENT_DATE
)
WITH DATA
PRIMARY INDEX (AGREEMENT_RK)
INDEX (REPORT_DT);
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- определяем даты фактического закрытия, продажи, списания и реструктуризации
CREATE MULTISET TABLE Z_20160818_007_ AS
(
SELECT
	S.AGREEMENT_RK, 
	S.SEGMENT,
	LA.CLOSE_FACT_DT,
	ACH.RESTRUCTING_DT,
	FLD.ENTRY_DT,
	FLD.DISPOSAL_TYPE_CD
FROM Z_20160818_002 S
INNER JOIN CDM.AGG_LOAN_ISSUE_DAR A
	ON S.AGREEMENT_RK = A.AGREEMENT_RK
INNER JOIN CDM.CD_LOAN_AGREEMENT LA
	ON A.CUR_AGREEMENT_RK = LA.AGREEMENT_RK
		AND CURRENT_DATE BETWEEN LA.EFFECTIVE_FROM_DTTM AND LA.EFFECTIVE_TO_DTTM
		AND LA.DELETED_FLG = '0'
LEFT JOIN (SELECT
						MIGR_ROOT_AGREEMENT_RK,
						MAX(ENTRY_DT) ENTRY_DT
				FROM CDM.FCT_LOAN_DISPOSAL
				WHERE DELETED_FLG = '0'
				GROUP BY 1) LDD
	ON A.AGREEMENT_RK = LDD.MIGR_ROOT_AGREEMENT_RK
LEFT JOIN CDM.FCT_LOAN_DISPOSAL FLD
	ON A.AGREEMENT_RK = FLD.MIGR_ROOT_AGREEMENT_RK
		AND FLD.ENTRY_DT = LDD.ENTRY_DT
		AND FLD.DELETED_FLG = '0'
LEFT JOIN (SELECT
						PREVIOUS_AGREEMENT_RK,
						MAX(OPEN_DT) RESTRUCTING_DT
				FROM CDM.AGREEMENT_CHAIN ACH
				WHERE ACH.TRANSFORMATION_TYPE_CD IN ('CONV_PROD','RESTR_STAB','RESTR_STANDART','RESTR_SPECIAL')
						AND	ACH.AGREEMENT_CHAIN_TYPE_CD IN ('GENERAL', 'STAB')
				GROUP	BY PREVIOUS_AGREEMENT_RK) ACH
	ON ACH.PREVIOUS_AGREEMENT_RK = A.CUR_AGREEMENT_RK
)
WITH DATA
PRIMARY INDEX (AGREEMENT_RK);

DELETE Z_20160818_007
WHERE AGREEMENT_RK = 89911784
AND DISPOSAL_TYPE_CD = 'WRITEOFF';
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- определяем балансы перед продажей или списанием
CREATE MULTISET TABLE Z_20160818_008 AS
(
SELECT
	A.AGREEMENT_RK, A.GENERATION_DT,
	B.CURRENCY_ISO_CD,
	B.CURRENCY_RK,
	B.PRI_BALANCE_AMT+B.OVERDUE_PRI_BALANCE_AMT BALANCE,
	B.PRI_BALANCE_RUR_AMT+B.OVERDUE_PRI_BALANCE_RUR_AMT BALANCE_RUR
FROM Z_20160818_007 A
LEFT JOIN CDM.FCT_LOAN_BALANCE B
	ON A.AGREEMENT_RK = B.MIGR_ROOT_AGREEMENT_RK
		AND A.ENTRY_DT-1 BETWEEN B.EFFECTIVE_FROM_DTTM AND B.EFFECTIVE_TO_DTTM
		AND B.DELETED_FLG = '0'
WHERE ENTRY_DT IS NOT NULL
)
WITH DATA
PRIMARY INDEX (AGREEMENT_RK);
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- определяем балансы перед реструктуризацией
CREATE MULTISET TABLE Z_20160818_009 AS
(
SELECT
	A.AGREEMENT_RK, A.GENERATION_DT,
	B.CURRENCY_ISO_CD,
	B.CURRENCY_RK,
	B.PRI_BALANCE_AMT+B.OVERDUE_PRI_BALANCE_AMT BALANCE,
	B.PRI_BALANCE_RUR_AMT+B.OVERDUE_PRI_BALANCE_RUR_AMT BALANCE_RUR
FROM Z_20160818_007 A
LEFT JOIN CDM.FCT_LOAN_BALANCE B
	ON A.AGREEMENT_RK = B.MIGR_ROOT_AGREEMENT_RK
		AND A.RESTRUCTING_DT-1 BETWEEN B.EFFECTIVE_FROM_DTTM AND B.EFFECTIVE_TO_DTTM
		AND B.DELETED_FLG = '0'
WHERE RESTRUCTING_DT IS NOT NULL
)
WITH DATA
PRIMARY INDEX (AGREEMENT_RK);
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- формируем справочник контрактов
CREATE MULTISET TABLE Z_20160818_010 AS
(
SELECT
	A.AGREEMENT_RK, A.GENERATION_DT,
	A.SEGMENT,
	A.CLOSE_FACT_DT,
	A.RESTRUCTING_DT,
	C.CURRENCY_RK R_CURRENCY_RK,
	C.CURRENCY_ISO_CD R_CURRENCY,
	C.BALANCE R_BALANCE,
	C.BALANCE_RUR R_BALANCE_RUR,	
	A.ENTRY_DT,
	B.CURRENCY_RK E_CURRENCY_RK,
	B.CURRENCY_ISO_CD E_CURRENCY,
	B.BALANCE E_BALANCE,
	B.BALANCE_RUR E_BALANCE_RUR,	
	A.DISPOSAL_TYPE_CD	
FROM Z_20160818_007 A
LEFT JOIN Z_20160818_008 B
	ON A.AGREEMENT_RK = B.AGREEMENT_RK
		AND B.BALANCE <> 0
LEFT JOIN Z_20160818_009 C
	ON A.AGREEMENT_RK = C.AGREEMENT_RK
		AND C.BALANCE <> 0
)
WITH DATA
PRIMARY INDEX (AGREEMENT_RK)
INDEX (SEGMENT);
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- формируем статусы через 12 месяцев
CREATE MULTISET TABLE Z_20160818_011 AS
(
SELECT
	B.MONTHS, B.GENERATION_DT,
	A.SEGMENT,
	B.REPORT_DT,
	B.DPD_LEVEL,
	B.REPORT_DT_NEW,
	CASE
		WHEN A.ENTRY_DT BETWEEN B.REPORT_DT AND B.REPORT_DT_NEW AND COALESCE(B.BALANCE_NEW,0) = 0 AND B.DPD_LEVEL_NEW = '0' AND A.DISPOSAL_TYPE_CD = 'WRITEOFF' THEN 'WRITEOFF'
		WHEN A.ENTRY_DT BETWEEN B.REPORT_DT AND B.REPORT_DT_NEW AND COALESCE(B.BALANCE_NEW,0) = 0 AND B.DPD_LEVEL_NEW = '0' AND A.DISPOSAL_TYPE_CD <> 'WRITEOFF' THEN 'REALIZE'
		WHEN A.RESTRUCTING_DT BETWEEN B.REPORT_DT AND B.REPORT_DT_NEW AND COALESCE(B.BALANCE_NEW,0) = 0 AND B.DPD_LEVEL_NEW = '0' THEN 'RESTRUCTING'
		WHEN A.CLOSE_FACT_DT BETWEEN B.REPORT_DT AND B.REPORT_DT_NEW AND COALESCE(B.BALANCE_NEW,0) = 0 AND B.DPD_LEVEL_NEW = '0' THEN 'CLOSED'
		ELSE B.DPD_LEVEL_NEW END STATUS,
	COUNT(*) AGREEMENTS,
	SUM(B.BALANCE) BALANCE,
	SUM(CASE
		WHEN A.ENTRY_DT BETWEEN B.REPORT_DT AND B.REPORT_DT_NEW AND COALESCE(B.BALANCE_NEW,0) = 0 AND B.DPD_LEVEL_NEW = '0' THEN COALESCE(A.E_BALANCE,0)*R.RATE
		WHEN A.RESTRUCTING_DT BETWEEN B.REPORT_DT AND B.REPORT_DT_NEW AND COALESCE(B.BALANCE_NEW,0) = 0 AND B.DPD_LEVEL_NEW = '0' THEN COALESCE(A.R_BALANCE,0)*R.RATE
		ELSE COALESCE(B.BALANCE_NEW,0) END) BALANCE_NEW
FROM Z_20160818_010 A
INNER JOIN Z_20160818_004 B
	ON A.AGREEMENT_RK = B.AGREEMENT_RK
LEFT JOIN CDM.FCT_FX_RATE R
	ON B.REPORT_DT = R.CALENDAR_DT
		AND COALESCE(A.E_CURRENCY_RK,A.R_CURRENCY_RK) = R.SRC_CURRENCY_RK
		AND R.DELETED_FLG = '0'
GROUP BY 1,2,3,4,5,6,7
)
WITH DATA
NO PRIMARY INDEX
INDEX (REPORT_DT)
INDEX (STATUS)
INDEX (SEGMENT);
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- формируем статусы через 6 месяцев
CREATE MULTISET TABLE Z_20160818_012 AS
(
SELECT
	B.MONTHS, B.GENERATION_DT,
	A.SEGMENT,
	B.REPORT_DT,
	B.DPD_LEVEL,
	B.REPORT_DT_NEW,
	CASE
		WHEN A.ENTRY_DT BETWEEN B.REPORT_DT AND B.REPORT_DT_NEW AND COALESCE(B.BALANCE_NEW,0) = 0 AND B.DPD_LEVEL_NEW = '0' AND A.DISPOSAL_TYPE_CD = 'WRITEOFF' THEN 'WRITEOFF'
		WHEN A.ENTRY_DT BETWEEN B.REPORT_DT AND B.REPORT_DT_NEW AND COALESCE(B.BALANCE_NEW,0) = 0 AND B.DPD_LEVEL_NEW = '0' AND A.DISPOSAL_TYPE_CD <> 'WRITEOFF' THEN 'REALIZE'
		WHEN A.RESTRUCTING_DT BETWEEN B.REPORT_DT AND B.REPORT_DT_NEW AND COALESCE(B.BALANCE_NEW,0) = 0 AND B.DPD_LEVEL_NEW = '0' THEN 'RESTRUCTING'
		WHEN A.CLOSE_FACT_DT BETWEEN B.REPORT_DT AND B.REPORT_DT_NEW AND COALESCE(B.BALANCE_NEW,0) = 0 AND B.DPD_LEVEL_NEW = '0' THEN 'CLOSED'
		ELSE B.DPD_LEVEL_NEW END STATUS,
	COUNT(*) AGREEMENTS,
	SUM(B.BALANCE) BALANCE,
	SUM(CASE
		WHEN A.ENTRY_DT BETWEEN B.REPORT_DT AND B.REPORT_DT_NEW AND COALESCE(B.BALANCE_NEW,0) = 0 AND B.DPD_LEVEL_NEW = '0' THEN COALESCE(A.E_BALANCE,0)*R.RATE
		WHEN A.RESTRUCTING_DT BETWEEN B.REPORT_DT AND B.REPORT_DT_NEW AND COALESCE(B.BALANCE_NEW,0) = 0 AND B.DPD_LEVEL_NEW = '0' THEN COALESCE(A.R_BALANCE,0)*R.RATE
		ELSE COALESCE(B.BALANCE_NEW,0) END) BALANCE_NEW
FROM Z_20160818_010 A
INNER JOIN Z_20160818_005 B
	ON A.AGREEMENT_RK = B.AGREEMENT_RK
LEFT JOIN CDM.FCT_FX_RATE R
	ON B.REPORT_DT = R.CALENDAR_DT
		AND COALESCE(A.E_CURRENCY_RK,A.R_CURRENCY_RK) = R.SRC_CURRENCY_RK
		AND R.DELETED_FLG = '0'
GROUP BY 1,2,3,4,5,6,7
)
WITH DATA
NO PRIMARY INDEX
INDEX (REPORT_DT)
INDEX (STATUS)
INDEX (SEGMENT);
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- формируем статусы через 3 месяца
CREATE MULTISET TABLE Z_20160818_013 AS
(
SELECT
	B.MONTHS, B.GENERATION_DT,
	A.SEGMENT,
	B.REPORT_DT,
	B.DPD_LEVEL,
	B.REPORT_DT_NEW,
	CASE
		WHEN A.ENTRY_DT BETWEEN B.REPORT_DT AND B.REPORT_DT_NEW AND COALESCE(B.BALANCE_NEW,0) = 0 AND B.DPD_LEVEL_NEW = '0' AND A.DISPOSAL_TYPE_CD = 'WRITEOFF' THEN 'WRITEOFF'
		WHEN A.ENTRY_DT BETWEEN B.REPORT_DT AND B.REPORT_DT_NEW AND COALESCE(B.BALANCE_NEW,0) = 0 AND B.DPD_LEVEL_NEW = '0' AND A.DISPOSAL_TYPE_CD <> 'WRITEOFF' THEN 'REALIZE'
		WHEN A.RESTRUCTING_DT BETWEEN B.REPORT_DT AND B.REPORT_DT_NEW AND COALESCE(B.BALANCE_NEW,0) = 0 AND B.DPD_LEVEL_NEW = '0' THEN 'RESTRUCTING'
		WHEN A.CLOSE_FACT_DT BETWEEN B.REPORT_DT AND B.REPORT_DT_NEW AND COALESCE(B.BALANCE_NEW,0) = 0 AND B.DPD_LEVEL_NEW = '0' THEN 'CLOSED'
		ELSE B.DPD_LEVEL_NEW END STATUS,
	COUNT(*) AGREEMENTS,
	SUM(B.BALANCE) BALANCE,
	SUM(CASE
		WHEN A.ENTRY_DT BETWEEN B.REPORT_DT AND B.REPORT_DT_NEW AND COALESCE(B.BALANCE_NEW,0) = 0 AND B.DPD_LEVEL_NEW = '0' THEN COALESCE(A.E_BALANCE,0)*R.RATE
		WHEN A.RESTRUCTING_DT BETWEEN B.REPORT_DT AND B.REPORT_DT_NEW AND COALESCE(B.BALANCE_NEW,0) = 0 AND B.DPD_LEVEL_NEW = '0' THEN COALESCE(A.R_BALANCE,0)*R.RATE
		ELSE COALESCE(B.BALANCE_NEW,0) END) BALANCE_NEW
FROM Z_20160818_010 A
INNER JOIN Z_20160818_006 B
	ON A.AGREEMENT_RK = B.AGREEMENT_RK
LEFT JOIN CDM.FCT_FX_RATE R
	ON B.REPORT_DT = R.CALENDAR_DT
		AND COALESCE(A.E_CURRENCY_RK,A.R_CURRENCY_RK) = R.SRC_CURRENCY_RK
		AND R.DELETED_FLG = '0'
GROUP BY 1,2,3,4,5,6,7
)
WITH DATA
NO PRIMARY INDEX
INDEX (REPORT_DT)
INDEX (STATUS)
INDEX (SEGMENT);
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
CREATE MULTISET TABLE Z_20160818_014 AS
(
SELECT * FROM Z_20160818_011
UNION
SELECT * FROM Z_20160818_012
UNION
SELECT * FROM Z_20160818_013
)
WITH DATA
NO PRIMARY INDEX
INDEX (REPORT_DT)
INDEX (STATUS)
INDEX (SEGMENT);
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
CREATE MULTISET TABLE Z_20160818_015 AS
(
SELECT
	A.MONTHS, A.GENERATION_DT,
	A.SEGMENT,
	A.REPORT_DT,
	A.DPD_LEVEL,
	A.AGREEMENTS,
	A.BALANCE,
	CASE WHEN A.DPD_LEVEL = 'более 90' THEN A.BALANCE ELSE 0 END NPL,
	A.REPORT_DT_NEW,
	COALESCE(B.AGREEMENTS,0) AGREEMENTS_0,
	COALESCE(B.BALANCE,0) BALANCE_0,
	COALESCE(C.AGREEMENTS,0) AGREEMENTS_1_30,
	COALESCE(C.BALANCE,0) BALANCE_1_30,
	COALESCE(D.AGREEMENTS,0) AGREEMENTS_31_60,
	COALESCE(D.BALANCE,0) BALANCE_31_60,
	COALESCE(E.AGREEMENTS,0) AGREEMENTS_61_90,
	COALESCE(E.BALANCE,0) BALANCE_61_90,
	COALESCE(F.AGREEMENTS,0) AGREEMENTS_90_PLUS,
	COALESCE(F.BALANCE,0) BALANCE_90_PLUS
FROM (SELECT
	MONTHS, GENERATION_DT,
	SEGMENT,
	REPORT_DT,
	DPD_LEVEL,
	REPORT_DT_NEW,
	SUM(AGREEMENTS) AGREEMENTS,
	SUM(BALANCE) BALANCE
FROM Z_20160818_014
GROUP BY 1,2,3,4,5,6) A
LEFT JOIN (SELECT
	MONTHS, GENERATION_DT,
	SEGMENT,
	REPORT_DT,
	DPD_LEVEL,
	REPORT_DT_NEW,
	SUM(AGREEMENTS) AGREEMENTS,
	SUM(BALANCE_NEW) BALANCE
FROM Z_20160818_014
WHERE STATUS = '0'
GROUP BY 1,2,3,4,5,6) B
	ON A.MONTHS = B.MONTHS
		AND A.SEGMENT = B.SEGMENT
		AND A.GENERATION_DT = B.GENERATION_DT
		AND A.REPORT_DT = B.REPORT_DT
		AND A.DPD_LEVEL = B.DPD_LEVEL
		AND A.REPORT_DT_NEW = B.REPORT_DT_NEW
LEFT JOIN (SELECT
	MONTHS, GENERATION_DT,
	SEGMENT,
	REPORT_DT,
	DPD_LEVEL,
	REPORT_DT_NEW,
	SUM(AGREEMENTS) AGREEMENTS,
	SUM(BALANCE_NEW) BALANCE
FROM Z_20160818_014
WHERE STATUS = '1-30'
GROUP BY 1,2,3,4,5,6) C
	ON A.MONTHS = C.MONTHS
		AND A.SEGMENT = C.SEGMENT
		AND A.GENERATION_DT = C.GENERATION_DT
		AND A.REPORT_DT = C.REPORT_DT
		AND A.DPD_LEVEL = C.DPD_LEVEL
		AND A.REPORT_DT_NEW = C.REPORT_DT_NEW
LEFT JOIN (SELECT
	MONTHS, GENERATION_DT,
	SEGMENT,
	REPORT_DT,
	DPD_LEVEL,
	REPORT_DT_NEW,
	SUM(AGREEMENTS) AGREEMENTS,
	SUM(BALANCE_NEW) BALANCE
FROM Z_20160818_014
WHERE STATUS = '31-60'
GROUP BY 1,2,3,4,5,6) D
	ON A.MONTHS = D.MONTHS
		AND A.SEGMENT = D.SEGMENT
		AND A.GENERATION_DT = D.GENERATION_DT
		AND A.REPORT_DT = D.REPORT_DT
		AND A.DPD_LEVEL = D.DPD_LEVEL
		AND A.REPORT_DT_NEW = D.REPORT_DT_NEW
LEFT JOIN (SELECT
	MONTHS, GENERATION_DT,
	SEGMENT,
	REPORT_DT,
	DPD_LEVEL,
	REPORT_DT_NEW,
	SUM(AGREEMENTS) AGREEMENTS,
	SUM(BALANCE_NEW) BALANCE
FROM Z_20160818_014
WHERE STATUS = '61-90'
GROUP BY 1,2,3,4,5,6) E
	ON A.MONTHS = E.MONTHS
		AND A.SEGMENT = E.SEGMENT
		AND A.GENERATION_DT = E.GENERATION_DT
		AND A.REPORT_DT = E.REPORT_DT
		AND A.DPD_LEVEL = E.DPD_LEVEL
		AND A.REPORT_DT_NEW = E.REPORT_DT_NEW
LEFT JOIN (SELECT
	MONTHS, GENERATION_DT,
	SEGMENT,
	REPORT_DT,
	DPD_LEVEL,
	REPORT_DT_NEW,
	SUM(AGREEMENTS) AGREEMENTS,
	SUM(BALANCE_NEW) BALANCE,
	SUM(BALANCE) NPL
FROM Z_20160818_014
WHERE STATUS = 'более 90'
GROUP BY 1,2,3,4,5) F
	ON A.MONTHS = F.MONTHS
		AND A.SEGMENT = F.SEGMENT
		AND A.GENERATION_DT = F.GENERATION_DT
		AND A.REPORT_DT = F.REPORT_DT
		AND A.DPD_LEVEL = F.DPD_LEVEL
		AND A.REPORT_DT_NEW = F.REPORT_DT_NEW
)
WITH DATA
NO PRIMARY INDEX
INDEX (REPORT_DT)
INDEX (DPD_LEVEL)
INDEX (SEGMENT);
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
CREATE MULTISET TABLE Z_20160818_016 AS
(
SELECT
	A.MONTHS, A.GENERATION_DT,
	A.SEGMENT,
	A.REPORT_DT,
	A.DPD_LEVEL,
	A.AGREEMENTS,
	A.BALANCE,
	CASE WHEN A.DPD_LEVEL = 'более 90' THEN A.BALANCE ELSE 0 END NPL,
	A.REPORT_DT_NEW,
	COALESCE(B.AGREEMENTS,0) AGREEMENTS_CLOSED,
	COALESCE(B.BALANCE,0) BALANCE_CLOSED,
	COALESCE(C.AGREEMENTS,0) AGREEMENTS_REALIZE,
	COALESCE(C.BALANCE,0) BALANCE_REALIZE,
	COALESCE(D.AGREEMENTS,0) AGREEMENTS_RESTRUCTING,
	COALESCE(D.BALANCE,0) BALANCE_RESTRUCTING,
	COALESCE(E.AGREEMENTS,0) AGREEMENTS_WRITEOFF,
	COALESCE(E.BALANCE,0) BALANCE_WRITEOFF
FROM (SELECT
	MONTHS, GENERATION_DT,
	SEGMENT,
	REPORT_DT,
	DPD_LEVEL,
	REPORT_DT_NEW,
	SUM(AGREEMENTS) AGREEMENTS,
	SUM(BALANCE) BALANCE
FROM Z_20160818_014
GROUP BY 1,2,3,4,5,6) A
LEFT JOIN (SELECT
	MONTHS, GENERATION_DT,
	SEGMENT,
	REPORT_DT,
	DPD_LEVEL,
	REPORT_DT_NEW,
	SUM(AGREEMENTS) AGREEMENTS,
	SUM(BALANCE_NEW) BALANCE
FROM Z_20160818_014
WHERE STATUS = 'CLOSED'
GROUP BY 1,2,3,4,5,6) B
	ON A.MONTHS = B.MONTHS
		AND A.SEGMENT = B.SEGMENT
		AND A.GENERATION_DT = B.GENERATION_DT
		AND A.REPORT_DT = B.REPORT_DT
		AND A.DPD_LEVEL = B.DPD_LEVEL
		AND A.REPORT_DT_NEW = B.REPORT_DT_NEW
LEFT JOIN (SELECT
	MONTHS, GENERATION_DT,
	SEGMENT,
	REPORT_DT,
	DPD_LEVEL,
	REPORT_DT_NEW,
	SUM(AGREEMENTS) AGREEMENTS,
	SUM(BALANCE_NEW) BALANCE
FROM Z_20160818_014
WHERE STATUS = 'REALIZE'
GROUP BY 1,2,3,4,5,6) C
	ON A.MONTHS = C.MONTHS
		AND A.SEGMENT = C.SEGMENT
		AND A.GENERATION_DT = C.GENERATION_DT
		AND A.REPORT_DT = C.REPORT_DT
		AND A.DPD_LEVEL = C.DPD_LEVEL
		AND A.REPORT_DT_NEW = C.REPORT_DT_NEW
LEFT JOIN (SELECT
	MONTHS, GENERATION_DT,
	SEGMENT,
	REPORT_DT,
	DPD_LEVEL,
	REPORT_DT_NEW,
	SUM(AGREEMENTS) AGREEMENTS,
	SUM(BALANCE_NEW) BALANCE
FROM Z_20160818_014
WHERE STATUS = 'RESTRUCTING'
GROUP BY 1,2,3,4,5,6) D
	ON A.MONTHS = D.MONTHS
		AND A.SEGMENT = D.SEGMENT
		AND A.GENERATION_DT = D.GENERATION_DT
		AND A.REPORT_DT = D.REPORT_DT
		AND A.DPD_LEVEL = D.DPD_LEVEL
		AND A.REPORT_DT_NEW = D.REPORT_DT_NEW
LEFT JOIN (SELECT
	MONTHS, GENERATION_DT,
	SEGMENT,
	REPORT_DT,
	DPD_LEVEL,
	REPORT_DT_NEW,
	SUM(AGREEMENTS) AGREEMENTS,
	SUM(BALANCE_NEW) BALANCE
FROM Z_20160818_014
WHERE STATUS = 'WRITEOFF'
GROUP BY 1,2,3,4,5,6) E
	ON A.MONTHS = E.MONTHS
		AND A.SEGMENT = E.SEGMENT
		AND A.GENERATION_DT = E.GENERATION_DT
		AND A.REPORT_DT = E.REPORT_DT
		AND A.DPD_LEVEL = E.DPD_LEVEL
		AND A.REPORT_DT_NEW = E.REPORT_DT_NEW
)
WITH DATA
NO PRIMARY INDEX
INDEX (REPORT_DT)
INDEX (DPD_LEVEL)
INDEX (SEGMENT);
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
CREATE MULTISET TABLE Z_20160818_017 AS
(
SELECT
	A.*,
	B.AGREEMENTS_CLOSED,
	B.BALANCE_CLOSED,
	B.AGREEMENTS_REALIZE,
	B.BALANCE_REALIZE,
	B.AGREEMENTS_RESTRUCTING,
	B.BALANCE_RESTRUCTING,
	B.AGREEMENTS_WRITEOFF,
	B.BALANCE_WRITEOFF
FROM Z_20160818_015 A
INNER JOIN Z_20160818_016 B
	ON A.MONTHS = B.MONTHS
		AND A.SEGMENT = B.SEGMENT
		AND A.GENERATION_DT = B.GENERATION_DT
		AND A.REPORT_DT = B.REPORT_DT
		AND A.DPD_LEVEL = B.DPD_LEVEL
		AND A.REPORT_DT_NEW = B.REPORT_DT_NEW
)
WITH DATA
NO PRIMARY INDEX
INDEX (REPORT_DT)
INDEX (DPD_LEVEL)
INDEX (SEGMENT);
---------------------------------------------------------------------------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------------------------------------------------------------------------

DROP TABLE lp;
CREATE VOLATILE TABLE lp AS (
SELECT DISTINCT co.ACCOUNTANT_CUSTOMER_RK AS RK FROM CDM.CD_GLOBAL_CORPORATE_CUSTOMER co 
WHERE co.IS_ACTIVE_FLG = '1' AND co.DELETED_FLG = '0' AND COALESCE(RK, -1) > 0
UNION
SELECT DISTINCT co.CHIEF_CUSTOMER_RK AS RK FROM CDM.CD_GLOBAL_CORPORATE_CUSTOMER co 
WHERE co.IS_ACTIVE_FLG = '1' AND co.DELETED_FLG = '0' AND COALESCE(RK, -1) > 0
) WITH DATA PRIMARY INDEX (RK) ON COMMIT PRESERVE ROWS;
　
DROP TABLE co_x_lp;
CREATE VOLATILE TABLE co_x_lp AS (
SELECT DISTINCT 
co.CUSTOMER_MDM_RK AS RK, 
co.ACCOUNTANT_CUSTOMER_RK AS AC_RK, 
co.CHIEF_CUSTOMER_RK AS CH_RK
FROM CDM.CD_GLOBAL_CORPORATE_CUSTOMER co
WHERE co.IS_ACTIVE_FLG = '1' AND co.DELETED_FLG = '0' 
AND NOT (COALESCE(AC_RK, -1) < 0 AND COALESCE(CH_RK, -1) < 0)
) WITH DATA PRIMARY INDEX (RK, AC_RK, CH_RK) ON COMMIT PRESERVE ROWS;
　
DROP TABLE atm;
CREATE VOLATILE TABLE atm AS (
WITH ci (RK_, ATM) AS (
SELECT DISTINCT c.CUSTOMER_MDM_RK AS RK_, c.ATM_PHONE_NUM AS ATM 
FROM CDM.CD_GLOBAL_INDIVIDUAL_CUSTOMER c
JOIN lp lp ON RK_ = lp.RK 
WHERE ATM IS NOT NULL AND c.DELETED_FLG = '0' AND c.IS_ACTIVE_FLG ^= '2' 
)
SELECT
c.RK, c.ATM, ROW_NUMBER() OVER(PARTITION BY c.RK ORDER BY c.ATM) AS rn, COUNT(c.ATM) OVER (PARTITION BY c.RK) AS rc
FROM (
SELECT DISTINCT CAST(d.outkey AS BIGINT) AS RK, TD_SYSFNLIB.OTRANSLATE(TRIM(d.token), '-', '') AS ATM
FROM TABLE (TD_SYSFNLIB.STRTOK_SPLIT_TO_TABLE (CAST(ci.RK_ AS VARCHAR(15)), ci.ATM, ';' ) 
RETURNS (outkey VARCHAR(15), tokennum INTEGER, token VARCHAR(20))) d 
WHERE LENGTH (ATM) > 6) c
) WITH DATA PRIMARY INDEX (RK, rn) ON COMMIT PRESERVE ROWS;
　
DROP TABLE hom;
CREATE VOLATILE TABLE hom AS (
WITH ci (RK_, HOM) AS (
SELECT DISTINCT c.CUSTOMER_MDM_RK AS RK_, c.HOME_PHONE_NUM AS HOM
FROM CDM.CD_GLOBAL_INDIVIDUAL_CUSTOMER c
JOIN lp lp ON RK_ = lp.RK 
WHERE HOM IS NOT NULL AND c.DELETED_FLG = '0' AND c.IS_ACTIVE_FLG ^= '2' 
)
SELECT 
c.RK, c.HOM, ROW_NUMBER() OVER(PARTITION BY c.RK ORDER BY c.HOM) AS rn, COUNT(c.HOM) OVER (PARTITION BY c.RK) AS rc
FROM (
SELECT DISTINCT CAST(d.outkey AS BIGINT) AS RK, TD_SYSFNLIB.OTRANSLATE(TRIM(d.token), '-', '') AS HOM
FROM TABLE (TD_SYSFNLIB.STRTOK_SPLIT_TO_TABLE (CAST(ci.RK_ AS VARCHAR(15)), ci.HOM, ';' ) 
RETURNS (outkey VARCHAR(15), tokennum INTEGER, token VARCHAR(20))) d 
WHERE LENGTH (HOM) > 6) c
) WITH DATA PRIMARY INDEX (RK, rn) ON COMMIT PRESERVE ROWS;
　
DROP TABLE mob;
CREATE VOLATILE TABLE mob AS (
WITH ci (RK_, MOB) AS (
SELECT DISTINCT c.CUSTOMER_MDM_RK AS RK_, c.MOBILE_PHONE_NUM AS MOB
FROM CDM.CD_GLOBAL_INDIVIDUAL_CUSTOMER c
JOIN lp lp ON RK_ = lp.RK 
WHERE MOB IS NOT NULL AND c.DELETED_FLG = '0' AND c.IS_ACTIVE_FLG ^= '2' 
)
SELECT 
c.RK, c.MOB, ROW_NUMBER() OVER(PARTITION BY c.RK ORDER BY c.MOB) AS rn, COUNT(c.MOB) OVER (PARTITION BY c.RK) AS rc
FROM (
SELECT DISTINCT CAST(d.outkey AS BIGINT) AS RK, TD_SYSFNLIB.OTRANSLATE(TRIM(d.token), '-', '') AS MOB
FROM TABLE (TD_SYSFNLIB.STRTOK_SPLIT_TO_TABLE (CAST(ci.RK_ AS VARCHAR(15)), ci.MOB, ';' ) 
RETURNS (outkey VARCHAR(15), tokennum INTEGER, token VARCHAR(20))) d 
WHERE LENGTH (MOB) > 6) c
) WITH DATA PRIMARY INDEX (RK, rn) ON COMMIT PRESERVE ROWS;
　
DROP TABLE wrk;
CREATE VOLATILE TABLE wrk AS (
WITH ci (RK_, WRK) AS (
SELECT DISTINCT c.CUSTOMER_MDM_RK AS RK_, c.WORK_PHONE_NUM AS WRK
FROM CDM.CD_GLOBAL_INDIVIDUAL_CUSTOMER c
JOIN lp lp ON RK_ = lp.RK 
WHERE WRK IS NOT NULL AND c.DELETED_FLG = '0' AND c.IS_ACTIVE_FLG ^= '2' 
)
SELECT 
c.RK, c.WRK, ROW_NUMBER() OVER(PARTITION BY c.RK ORDER BY c.WRK) AS rn, COUNT(c.WRK) OVER (PARTITION BY c.RK) AS rc
FROM (
SELECT DISTINCT CAST(d.outkey AS BIGINT) AS RK, TD_SYSFNLIB.OTRANSLATE(TRIM(d.token), '-', '') AS WRK
FROM TABLE (TD_SYSFNLIB.STRTOK_SPLIT_TO_TABLE (CAST(ci.RK_ AS VARCHAR(15)), ci.WRK, ';' ) 
RETURNS (outkey VARCHAR(15), tokennum INTEGER, token VARCHAR(20))) d 
WHERE LENGTH (WRK) > 6) c
) WITH DATA PRIMARY INDEX (RK, rn) ON COMMIT PRESERVE ROWS;
　
DROP TABLE lpph; 
CREATE TABLE lpph AS ( ---Собираем номера обратно
WITH 
RECURSIVE acte (RK, ATM, rn) AS 
	(SELECT atm.RK, CAST(atm.ATM AS VARCHAR(100)) AS ATM, atm.rn
	FROM atm
	WHERE atm.rn = atm.rc
	UNION ALL
	SELECT atm.RK, acte.ATM||'; '||CAST(atm.ATM AS VARCHAR(100)) AS ATM, atm.rn
	FROM atm
	JOIN acte
	ON atm.RK = acte.RK AND atm.rn = acte.rn - 1
	),
RECURSIVE hcte (RK, HOM, rn) AS 
	(SELECT hom.RK, CAST(hom.HOM AS VARCHAR(100)) AS HOM, hom.rn
	FROM hom
	WHERE hom.rn = hom.rc
	UNION ALL
	SELECT hom.RK, hcte.HOM||'; '||CAST(hom.HOM AS VARCHAR(100)) AS HOM, hom.rn
	FROM hom
	JOIN hcte
	ON hom.RK = hcte.RK AND hom.rn = hcte.rn - 1
	),
RECURSIVE mcte (RK, MOB, rn) AS 
	(SELECT mob.RK, CAST(mob.MOB AS VARCHAR(100)) AS MOB, mob.rn
	FROM mob
	WHERE mob.rn = mob.rc
	UNION ALL
	SELECT mob.RK, mcte.MOB||'; '||CAST(mob.MOB AS VARCHAR(100)) AS MOB, mob.rn
	FROM mob
	JOIN mcte
	ON mob.RK = mcte.RK AND mob.rn = mcte.rn - 1
	),
RECURSIVE wcte (RK, WRK, rn) AS 
	(SELECT wrk.RK, CAST(wrk.WRK AS VARCHAR(100)) AS WRK, wrk.rn
	FROM wrk
	WHERE wrk.rn = wrk.rc
	UNION ALL
	SELECT wrk.RK, wcte.WRK||'; '||CAST(wrk.WRK AS VARCHAR(100)) AS WRK, wrk.rn
	FROM wrk
	JOIN wcte
	ON wrk.RK = wcte.RK AND wrk.rn = wcte.rn - 1
	)
SELECT 
lp.RK, COALESCE(a.ATM, '') AS ATM, COALESCE(h.HOM, '') AS HOM, COALESCE(m.MOB, '') AS MOB, COALESCE(w.WRK, '') AS WRK
FROM lp lp
LEFT JOIN (
SELECT acte.RK, acte.ATM FROM acte WHERE acte.rn = 1) a
ON lp.RK = a.RK
LEFT JOIN (
SELECT hcte.RK, hcte.HOM FROM hcte WHERE hcte.rn = 1) h
ON lp.RK = h.RK
LEFT JOIN (
SELECT mcte.RK, mcte.MOB FROM mcte WHERE mcte.rn = 1) m
ON lp.RK = m.RK
LEFT JOIN (
SELECT wcte.RK, wcte.WRK FROM wcte WHERE wcte.rn = 1) w
ON lp.RK = w.RK
) WITH DATA PRIMARY INDEX (RK);
　
SEL DISTINCT
cu.CUST_NM, cu.OGRN, cu.INN, cu.OKV, 
TRIM(CAST(COALESCE(cu.CONT_PH,'') AS VARCHAR(20))) AS CONT_PH, 
TRIM(CAST(COALESCE(cu.NOT_PH,'') AS VARCHAR(20))) AS NOT_PH, 
TRIM(CAST(COALESCE(cu.AC_NM,'') AS VARCHAR(200))) AS AC_NM, 
TRIM(CAST(COALESCE(ac.ATM,'') AS VARCHAR(200))) AS AC_ATM, 
TRIM(CAST(COALESCE(ac.HOM,'') AS VARCHAR(200))) AS AC_HOM, 
TRIM(CAST(COALESCE(ac.MOB,'') AS VARCHAR(200))) AS AC_MOB, 
TRIM(CAST(COALESCE(ac.WRK,'') AS VARCHAR(200))) AS AC_WRK, 
TRIM(CAST(COALESCE(cu.CH_NM,'') AS VARCHAR(200))) AS CH_NM, 
TRIM(CAST(COALESCE(ch.ATM,'') AS VARCHAR(200))) AS CH_ATM, 
TRIM(CAST(COALESCE(ch.HOM,'') AS VARCHAR(200))) AS CH_HOM, 
TRIM(CAST(COALESCE(ch.MOB,'') AS VARCHAR(200))) AS CH_MOB, 
TRIM(CAST(COALESCE(ch.WRK,'') AS VARCHAR(200))) AS CH_WRK
--, turn.TURN_AMT
FROM (
SEL DISTINCT 
cl.RK AS GRK, 
COALESCE(c.ORGANIZATION_NM, c.ORGANIZATION_SHORT_NM) AS CUST_NM, 
c.OGRN_NUM AS OGRN, c.TAX_PAYER_NUM AS INN, c.OKVED_CD AS OKV, 
cl.AC_RK, 
c.ACCOUNTANT_FULL_NM AS AC_NM, 
cl.CH_RK, 
c.CHIEF_FULL_NM AS CH_NM, 
c.CONTACT_PHONE_NUM AS CONT_PH, c.NOTIFICATION_NUM AS NOT_PH
FROM co_x_lp cl
JOIN CDM.CD_GLOBAL_CORPORATE_CUSTOMER c
ON cl.RK = c.CUSTOMER_MDM_RK
AND c.IS_ACTIVE_FLG= '1' AND c.DELETED_FLG = '0'
AND c.OKVED_CD IN ('31.0', '46.47', '68.1', '46.43', '47.4', '45.1', '86.10', '86.21', '86.90', '13.20', '13.9', '14.1', '14.2', '46.42', '46.41', '47.5', '47.91.2')
AND (UPPER(c.ADDRESS_FACT) LIKE '% МОСКВА %' OR UPPER(c.ADDRESS_LEGAL) LIKE '% МОСКВА %')
AND NOT(c.OGRN_NUM IS NULL AND c.TAX_PAYER_NUM IS NULL)
) cu 
LEFT JOIN lpph ac
ON cu.AC_RK = ac.RK
LEFT JOIN lpph ch
ON cu.CH_RK = ch.RK
/*
LEFT JOIN (
SELECT DISTINCT 
g.CUSTOMER_GLOBAL_RK AS GRK, SUM (turn.TURN_AMT) AS TURN_AMT
FROM CDM.TECH_CUSTOMER_X_GLOBAL g
JOIN (
SEL DISTINCT 
acc.CUSTOMER_RK, SUM(ZEROIFNULL(COALESCE(t.TURN_CREDIT_AMT_NC, t.TURN_CREDIT_AMT))) AS TURN_AMT
FROM DDS.ACCOUNT_BIS_HIST acc
JOIN DDS.ACCOUNT_TURN t
ON t.ACCOUNT_RK = acc.ACCOUNT_RK 
AND t.SOURCE_SYSTEM_CD = acc.SOURCE_SYSTEM_CD
AND t.TURN_DT BETWEEN ADD_MONTHS(CURRENT_DATE, -12) AND CURRENT_DATE
AND acc.CUSTOMER_TYPE_CD = 'Ю'
AND acc.DELETED_FLG = '0' AND ADD_MONTHS(CURRENT_DATE, -12) BETWEEN acc.EFFECTIVE_FROM_DTTM AND acc.EFFECTIVE_TO_DTTM
AND acc.GL_ACCOUNT_NUM IN ('40502', '40503', '40602', '40603', '40702', '40703', '40802', '40817')
AND ZEROIFNULL(COALESCE(t.TURN_CREDIT_AMT_NC, t.TURN_CREDIT_AMT)) > 0
GROUP BY 1
UNION
SEL DISTINCT 
acc.CUSTOMER_RK, SUM(ZEROIFNULL(COALESCE(t.TURN_CREDIT_AMT_NC, t.TURN_CREDIT_AMT))) AS TURN_AMT
FROM DDS.ACCOUNT_CFT_HIST acc
JOIN DDS.ACCOUNT_TURN t
ON t.ACCOUNT_RK = acc.ACCOUNT_RK 
AND t.SOURCE_SYSTEM_CD = acc.SOURCE_SYSTEM_CD
AND t.TURN_DT BETWEEN ADD_MONTHS(CURRENT_DATE, -12) AND CURRENT_DATE
AND acc.CUSTOMER_TYPE_CD = 'Ю'
AND acc.DELETED_FLG = '0' AND ADD_MONTHS(CURRENT_DATE, -12) BETWEEN acc.EFFECTIVE_FROM_DTTM AND acc.EFFECTIVE_TO_DTTM
AND acc.GL_ACCOUNT_NUM IN ('40502', '40503', '40602', '40603', '40702', '40703', '40802', '40817')
AND ZEROIFNULL(COALESCE(t.TURN_CREDIT_AMT_NC, t.TURN_CREDIT_AMT)) > 0
GROUP BY 1
) turn
ON g.CUSTOMER_RK = turn.CUSTOMER_RK
AND g.CUSTOMER_GLOBAL_TYPE = 'MDM' 
AND g.CUSTOMER_TYPE_CD = 'Ю'
AND g.DELETED_FLG = '0'
GROUP BY 1
) turn 
ON cu.GRK = turn.GRK
*/

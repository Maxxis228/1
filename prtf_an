--отчетные даты 
DROP TABLE _report_date1;
CREATE TABLE _report_date1 AS ( 
SELECT DISTINCT 
	MONTH_END(CALENDAR_DT) AS REPORT_DT 
FROM DDS.DIM_CALENDAR 
WHERE (CALENDAR_DT BETWEEN DATE '2007-12-31' AND CURRENT_DATE - EXTRACT(DAY FROM CURRENT_DATE) )
　
UNION 
SELECT CURRENT_DATE FROM dua
) WITH DATA PRIMARY INDEX (REPORT_DT);
　
COLLECT STATISTICS COLUMN REPORT_DT ON _report_date1;
　
-----------------точки продаж
DROP TABLE pos;
CREATE TABLE pos AS (
	WITH RECURSIVE hx (ORG_ID, ORG_RK, LVL, PARENT_ID, PARENT_RK) AS 
	(SELECT
	INTERNAL_ORG_ID, INTERNAL_ORG_RK, HIERARHY_LEVEL, PARENT_INTERNAL_ORG_ID, PARENT_INTERNAL_ORG_RK
		FROM DDS.INTERNAL_ORG_HIERARCHY
		WHERE (ORG_HIERARCHY_CD = 'ACCESS') AND (HIERARHY_LEVEL IN (2, 3)) 
		AND (CURRENT_DATE BETWEEN EFFECTIVE_FROM_DTTM AND EFFECTIVE_TO_DTTM) AND (DELETED_FLG = 0) AND (IS_ACTIVE_FLG = 1)
    
	UNION ALL  
	SELECT
	hx.ORG_ID, hx.ORG_RK, h.HIERARHY_LEVEL, h.PARENT_INTERNAL_ORG_ID, h.PARENT_INTERNAL_ORG_RK
		FROM hx
		JOIN DDS.INTERNAL_ORG_HIERARCHY h
		ON (h.INTERNAL_ORG_RK = hx.PARENT_RK) AND (h.ORG_HIERARCHY_CD = 'ACCESS') 
		AND (CURRENT_DATE BETWEEN h.EFFECTIVE_FROM_DTTM AND h.EFFECTIVE_TO_DTTM) AND (h.DELETED_FLG = 0) AND (h.IS_ACTIVE_FLG = 1)
	)
　
SELECT
b.INTERNAL_ORG_ID AS BRANCH_ID, b.INTERNAL_ORG_NM AS BRANCH_NM,  o.INTERNAL_ORG_ID AS OFFICE_ID, o.INTERNAL_ORG_NM AS OFFICE_NM, 
o.INTERNAL_ORG_TYPE_CD AS OFFICE_TYPE, p.INTERNAL_ORG_ID AS POS_ID, p.INTERNAL_ORG_NM AS POS_NM, p.INTERNAL_ORG_TYPE_CD AS POS_TYPE, 
p.DISTRICT_GEOGRAPHY_CD AS DISTRICT, p.REGION_GEOGRAPHY_CD AS REGION, p.MOSCOW_REGION_CD AS REGION_TYPE, p.CITY, x.ORG_ID, x.ORG_RK
	FROM
	(SELECT DISTINCT 
	ORG_ID, ORG_RK, COALESCE(MIN(POS_RK) OVER (PARTITION BY ORG_RK), ORG_RK) AS POS_RK, MIN(OFFICE_RK) OVER (PARTITION BY ORG_RK) AS OFFICE_RK
		FROM
  		(SELECT 
		x.*, CASE WHEN LVL = 2 THEN PARENT_RK END AS OFFICE_RK, CASE WHEN LVL = 3 THEN PARENT_RK END AS POS_RK
			FROM hx x
			JOIN DDS.INTERNAL_ORG o
			ON (o.INTERNAL_ORG_RK = x.PARENT_RK) AND (o.IS_ACTIVE_FLG = 1)
  		) x
	) x
 
	LEFT JOIN DDS.INTERNAL_ORG o
	ON (o.INTERNAL_ORG_RK = x.OFFICE_RK) AND (o.IS_ACTIVE_FLG = 1) 
	
	LEFT JOIN DDS.INTERNAL_ORG p
	ON (p.INTERNAL_ORG_RK = x.POS_RK) AND (p.IS_ACTIVE_FLG = 1)
	
	LEFT JOIN DDS.INTERNAL_ORG_HIERARCHY xb
	ON (xb.INTERNAL_ORG_RK = x.POS_RK) AND (xb.ORG_HIERARCHY_CD = 'СВОД') 
	AND (CURRENT_DATE BETWEEN xb.EFFECTIVE_FROM_DTTM AND xb.EFFECTIVE_TO_DTTM) AND (xb.DELETED_FLG = 0) AND (xb.IS_ACTIVE_FLG = 1)
	
	LEFT JOIN DDS.INTERNAL_ORG b
	ON (b.INTERNAL_ORG_RK = xb.PARENT_INTERNAL_ORG_RK) AND (b.IS_ACTIVE_FLG = 1)
　
UNION
SELECT
o.INTERNAL_ORG_ID AS BRANCH_ID, o.INTERNAL_ORG_NM AS BRANCH_NM, o.INTERNAL_ORG_ID AS OFFICE_ID, o.INTERNAL_ORG_NM AS OFFICE_NM, 
o.INTERNAL_ORG_TYPE_CD AS OFFICE_TYPE, o.INTERNAL_ORG_ID AS POS_ID, o.INTERNAL_ORG_NM AS POS_NM, o.INTERNAL_ORG_TYPE_CD AS POS_TYPE, 
o.DISTRICT_GEOGRAPHY_CD AS DISTRICT, o.REGION_GEOGRAPHY_CD AS REGION, o.MOSCOW_REGION_CD AS REGION_TYPE, o.CITY, b.ORG_ID, b.ORG_RK
	FROM
	(SELECT
	INTERNAL_ORG_ID AS ORG_ID, INTERNAL_ORG_RK AS ORG_RK
		FROM DDS.INTERNAL_ORG_HIERARCHY
		WHERE (ORG_HIERARCHY_CD = 'ACCESS') AND (HIERARHY_LEVEL = 1)
		AND (CURRENT_DATE BETWEEN EFFECTIVE_FROM_DTTM AND EFFECTIVE_TO_DTTM) AND (DELETED_FLG = 0) AND (IS_ACTIVE_FLG = 1)
	) b
	
	LEFT JOIN DDS.INTERNAL_ORG o
	ON (o.INTERNAL_ORG_RK = b.ORG_RK) AND (o.IS_ACTIVE_FLG = 1)	
) WITH DATA UNIQUE PRIMARY INDEX (ORG_RK);
COLLECT STATISTICS COLUMN ORG_RK ON pos;
　
--бакеты просрочки натуральные
DROP TABLE dlq_rng_old;
CREATE TABLE dlq_rng_old AS (
SELECT DISTINCT 
	RANGE_ORDER_NUM+1 AS RANGE_ORDER_NUM, RANGE_BEGIN_DAYS_CNT, 
	CASE WHEN dr.RANGE_ORDER_NUM < 6 THEN dr.RANGE_END_DAYS_CNT ELSE 9999 END AS RANGE_END_DAYS_CNT 
FROM CDM.MREF_DELINQUENCY_RANGE dr
WHERE (dr.DELINQUENCY_RANGE_SET_CD = '140') AND (dr.IS_ACTIVE_FLG = '1') AND (dr.RANGE_ORDER_NUM < 7)
) WITH DATA PRIMARY INDEX (RANGE_BEGIN_DAYS_CNT, RANGE_END_DAYS_CNT);
　
COLLECT STATISTICS COLUMN RANGE_ORDER_NUM, COLUMN RANGE_BEGIN_DAYS_CNT, COLUMN RANGE_END_DAYS_CNT ON dlq_rng_old;
　
--список всех существовавших договоров Бисквит по нашим продуктам
DROP TABLE _contract;
CREATE  TABLE _contract AS (
SELECT DISTINCT 
	c.AGREEMENT_RK, 
	c.SOURCE_SYSTEM_CD AS BRANCH_ID, 
	CASE WHEN c.CLOSE_DT < CURRENT_DATE THEN c.CLOSE_DT ELSE c.CLOSE_PLAN_DT END AS CLOSE_DT, 
	COALESCE(SUM(lim.CREDIT_LIMIT_AMT) OVER (PARTITION BY c.AGREEMENT_RK), c.CONTRACT_AMT) AS CONTRACT_AMT, 
	c.CONTRACT_ID, 
	c.CUSTOMER_RK, c.CUSTOMER_TYPE_CD, 
	TRUNC(COALESCE(c.MIGRATION_OPEN_DT, c.ISSUE_DT), 'mm') AS GENERATION, 
	COALESCE(c.MIGRATION_OPEN_DT, c.ISSUE_DT) AS ISSUE_DT, 
	COALESCE(c.MIGRATION_OPEN_DT, c.OPEN_DT) AS OPEN_DT,
	COALESCE(c.INIT_INTERNAL_ORG_2_RK, c.INIT_INTERNAL_ORG_RK) AS POS_DEPT_RK,
	CASE 
		WHEN c.PRODUCT_OPERATIONAL_ID = 'ПШ' THEN CAST('080. 136. Коммерсант ФЛ. Предодобренные' AS VARCHAR(50))
		WHEN c.PRODUCT_OPERATIONAL_ID LIKE 'П%' THEN CAST('080. 058. Коммерсант ФЛ' AS VARCHAR(50))
		WHEN c.PRODUCT_OPERATIONAL_ID = 'МН' AND c.PRODUCT_SUB_ID NOT IN ('10,МН,00009','10,МН,00010') THEN CAST('080. 057. Коммерсант ЮЛ' AS VARCHAR(50))
		WHEN c.PRODUCT_OPERATIONAL_ID IN ('РЦ','РЮ') THEN CAST('080. 558. Коммерсант ФЛ. Реструктуризация' AS VARCHAR(50))
		WHEN c.PRODUCT_OPERATIONAL_ID IN ('РЛ','РМ') OR c.PRODUCT_SUB_ID IN ('10,МН,00009','10,МН,00010') THEN CAST('080. 557. Коммерсант ЮЛ. Реструктуризация' AS VARCHAR(50))
		WHEN c.PRODUCT_SUB_ID = '23,ОВ,00015' THEN CAST('080.143. Овердрафт. Предодобренные (Комплимент)' AS VARCHAR(50))
	ELSE c.PRODUCT_OPERATIONAL_ID END AS PRODUCT_ID, 
	c.PRODUCT_SUB_ID AS SUBPRODUCT_ID,
	c.SOURCE_SYSTEM_CD
FROM DDS.CONTRACT_LN c
	
	LEFT JOIN DDS.AGREEMENT_CREDIT_LIMIT_HIST lim
		ON (lim.AGREEMENT_RK = c.AGREEMENT_RK) AND (lim.AGREEMENT_TYPE_CD = c.CONTRACT_TYPE_CD) AND (lim.START_DT = c.ISSUE_DT)
		AND (CURRENT_DATE BETWEEN lim.EFFECTIVE_FROM_DTTM AND lim.EFFECTIVE_TO_DTTM) AND (lim.DELETED_FLG = '0') AND (lim.IS_ACTIVE_FLG = '1')
　
WHERE (c.CONTRACT_TYPE_CD = 'КРЕДИТ')
	AND (c.CONTRACT_STATUS_CD NOT IN ('АНКЛ', 'БВВД', 'БВВЗ', 'ВВЕД', 'ВВИВ', 'ВВРВ'))
	AND (c.PRODUCT_OPERATIONAL_ID IN ('МН', 'ПМ', 'ПЭ', 'ПШ', 'ПЯ', 'РЛ', 'РМ', 'РЦ', 'РЮ') OR (c.PRODUCT_OPERATIONAL_ID = 'ОВ' AND c.PRODUCT_SUB_ID = '23,ОВ,00015'))
	AND (c.DELETED_FLG = '0')
　
UNION
　
SELECT 
	c.AGREEMENT_RK, c.BRANCH_CD AS BRANCH_ID, CASE WHEN c.CLOSE_DT < CURRENT_DATE THEN c.CLOSE_DT ELSE c.CLOSE_PLAN_DT END AS CLOSE_DT, 
	COALESCE(lim.LOAN_LIMIT_AMT, c.CONTRACT_AMT) AS CONTRACT_AMT, c.CONTRACT_NUM AS CONTRACT_ID, 
	c.CUSTOMER_RK, c.CUSTOMER_TYPE_CD, TRUNC(c.ISSUE_DT, 'mm') AS GENERATION, 
	c.ISSUE_DT, c.OPEN_DT, io.BIS_INTERNAL_ORG_RK AS POS_DEPT_RK, 
	CASE WHEN c.PRODUCT_CD IN ('0403.29#1575368617', '0403.30#1575368627') AND COALESCE(c.PRODUCT_SUB_ID, '10,МН,') NOT IN ('10,МН,00009','10,МН,00010') THEN '080. 057. Коммерсант ЮЛ'
	WHEN c.PRODUCT_CD IN ('0403.27#1575368597') OR c.PRODUCT_SUB_ID IN ('10,МН,00009','10,МН,00010') THEN '080. 557. Коммерсант ЮЛ. Реструктуризация' 
	WHEN c.PRODUCT_CD = '0403.09#1575368277' THEN '080.143. Овердрафт. Предодобренные (Комплимент)'
	END AS PRODUCT_ID, 
	c.PRODUCT_SUB_ID AS SUBPRODUCT_ID,
	c.SOURCE_SYSTEM_CD
FROM DDS.CONTRACT_LN_CFT_HIST c
	
	LEFT JOIN dds.INTERNAL_ORG_CFT_HIST io
		ON (io.INTERNAL_ORG_ID = c.INIT_INTERNAL_ORG_ID)
		AND (CURRENT_DATE BETWEEN io.EFFECTIVE_FROM_DTTM AND io.EFFECTIVE_TO_DTTM)
		AND (io.DELETED_FLG = '0')
	
	LEFT JOIN DDS.CONTRACT_LN_LIMIT_CFT_HIST lim
		ON (lim.AGREEMENT_RK = c.AGREEMENT_RK)
		AND (CURRENT_DATE BETWEEN lim.EFFECTIVE_FROM_DTTM AND lim.EFFECTIVE_TO_DTTM)
		AND (lim.DELETED_FLG = '0') AND (lim.LOAN_LIMIT_AMT > 0)
	
WHERE (c.CONTRACT_TYPE_CD = 'LOAN')
	AND (c.PRODUCT_CD IN ('0403.27#1575368597', '0403.29#1575368617', '0403.30#1575368627') OR (c.PRODUCT_CD = '0403.09#1575368277' AND c.PRODUCT_SUB_ID = '23,ОВ,00015') )
	AND (c.TRANCHE_NUM = '1') AND (ROOT_AGREEMENT_RK = -1) AND (CESSION_CONTRACT_NUM IS NULL) 
	AND (c.SOURCE_SYSTEM_CD = '90974') AND (CURRENT_DATE BETWEEN c.EFFECTIVE_FROM_DTTM AND c.EFFECTIVE_TO_DTTM)
	AND NOT (c.CONTRACT_AMT = 0.0 AND c.CONTRACT_STATUS_CD = 'CLOSE')
	AND COALESCE(c.CONTRACT_STATUS_CD, 'WORK') NOT IN ('WAIT_CONF')
QUALIFY ROW_NUMBER() OVER (PARTITION BY c.AGREEMENT_RK, c.PRODUCT_SUB_ID ORDER BY lim.START_DT DESC) = 1
) WITH DATA PRIMARY INDEX (AGREEMENT_RK);
　
COLLECT STATISTICS COLUMN BRANCH_ID, COLUMN ISSUE_DT, COLUMN CLOSE_DT, COLUMN AGREEMENT_RK ON _contract;
　
--мигрировавшие договоры
DROP TABLE migration;
CREATE TABLE migration AS (
SELECT 
	c.AGREEMENT_RK AS PREV_AGREEMENT_RK, 
	c.CONTRACT_ID AS PREV_CONTRACT_ID,
	ch.AGREEMENT_RK AS AGREEMENT_RK, 
	ch.AGREEMENT_ID AS CONTRACT_ID, 
	ch.OPEN_DT AS MIGRATION_DT
FROM _contract c
	
	INNER JOIN CDM.AGREEMENT_CHAIN_HIST ch
		ON (c.AGREEMENT_RK = ch.PREVIOUS_AGREEMENT_RK)
		AND (ch.AGREEMENT_CHAIN_TYPE_CD = 'MIGRATIONS')
		AND (ch.TRANSFORMATION_TYPE_CD = 'MIGRATION')
		AND (ch.IS_ACTIVE_FLG = '1') AND (ch.DELETED_FLG = '0')
) WITH DATA PRIMARY INDEX (PREV_AGREEMENT_RK, AGREEMENT_RK);
COLLECT STATISTICS COLUMN PREV_AGREEMENT_RK, COLUMN AGREEMENT_RK, COLUMN MIGRATION_DT ON migration;
　
--реструктурированые договоры 
DROP TABLE restr;
CREATE TABLE restr AS (
SELECT 
	c.AGREEMENT_RK AS PREV_AGREEMENT_RK, 
	c.CONTRACT_ID AS PREV_CONTRACT_ID,
	ch.AGREEMENT_RK AS AGREEMENT_RK, 
	ch.AGREEMENT_ID AS CONTRACT_ID, 
	ch.OPEN_DT AS RESTR_DT
FROM _contract c
	
	INNER JOIN CDM.AGREEMENT_CHAIN_HIST ch
		ON (SUBSTR(c.PRODUCT_ID, 6,1) = '0') --берем только 080. 057 и 080. 058 - коммерсы
		AND (c.AGREEMENT_RK = ch.PREVIOUS_AGREEMENT_RK) 
		AND (ch.TRANSFORMATION_TYPE_CD LIKE 'RESTR%')
		AND (ch.IS_ACTIVE_FLG = '1') AND (ch.DELETED_FLG = '0')
) WITH DATA PRIMARY INDEX (PREV_AGREEMENT_RK, AGREEMENT_RK);
　
COLLECT STATISTICS COLUMN PREV_AGREEMENT_RK, COLUMN AGREEMENT_RK, COLUMN RESTR_DT ON restr;
　
--списанные/проданные договоры с просрочкой на дату списания
DROP TABLE disposal;
CREATE TABLE disposal AS (
SELECT
	c.AGREEMENT_RK AS PREV_AGREEMENT_RK, 
	c.CONTRACT_ID AS PREV_CONTRACT_ID, 
	d.MIGR_ROOT_AGREEMENT_RK,
	d.ENTRY_DT AS DISPOSAL_DT, --дата списания/продажи
	d.DISPOSAL_TYPE_CD,
	COALESCE(d.PRI_BALANCE_RUR_AMT, 0) + COALESCE(d.OVERDUE_PRI_BALANCE_RUR_AMT, 0) AS DEBT_RUB_PRI, --ОД на дату списания
	COALESCE(d.INT_BALANCE_RUR_AMT, 0) + COALESCE(d.OVERDUE_INT_BALANCE_RUR_AMT, 0) AS DEBT_RUB_INT --% на дату списания
FROM _contract c
	
	INNER JOIN CDM.FCT_LOAN_DISPOSAL d
		ON (c.AGREEMENT_RK = d.AGREEMENT_RK) AND (d.DELETED_FLG = 0)
QUALIFY ROW_NUMBER () OVER (PARTITION BY PREV_AGREEMENT_RK ORDER BY ENTRY_DT DESC) = 1
) WITH DATA PRIMARY INDEX (PREV_AGREEMENT_RK, MIGR_ROOT_AGREEMENT_RK);
　
COLLECT STATISTICS COLUMN PREV_AGREEMENT_RK, COLUMN MIGR_ROOT_AGREEMENT_RK, COLUMN DISPOSAL_DT ON disposal;
　
ALTER TABLE _contract ADD ROOT_AGREEMENT_RK INTEGER DEFAULT NULL;
UPDATE _contract 
FROM (
	SELECT DISTINCT
		c.AGREEMENT_RK, ch.ROOT_AGREEMENT_RK 
	FROM _contract c
	
		INNER JOIN CDM.AGREEMENT_CHAIN_HIST ch
			ON (c.AGREEMENT_RK = ch.AGREEMENT_RK) AND (ch.AGREEMENT_CHAIN_TYPE_CD = 'GENERAL') AND (ch.DELETED_FLG = '0') AND (ch.IS_ACTIVE_FLG = '1') 
) cc
SET 
	ROOT_AGREEMENT_RK = cc.ROOT_AGREEMENT_RK 
WHERE (_contract.AGREEMENT_RK = cc.AGREEMENT_RK);
　
DROP TABLE _contract_; 
CREATE TABLE _contract_ AS (
SELECT 
	c.AGREEMENT_RK, c.GENERATION, c.BRANCH_ID, c.POS_DEPT_RK, c.CUSTOMER_RK, c.CUSTOMER_TYPE_CD, 
	c.ISSUE_DT, c.CLOSE_DT, c.CONTRACT_ID, c.CONTRACT_AMT, c.PRODUCT_ID, c.SUBPRODUCT_ID,
	d.DISPOSAL_DT,
	d.DEBT_RUB_PRI AS DISPOSAL_AMT, 
	d.DISPOSAL_TYPE_CD AS DISPOSAL_TYPE, 
	
	CASE 
		WHEN c.AGREEMENT_RK = m.PREV_AGREEMENT_RK THEN m.AGREEMENT_RK
	END AS MIGRATION_AGREEMENT_RK, 
	CASE 
		WHEN c.AGREEMENT_RK = m.PREV_AGREEMENT_RK THEN m.CONTRACT_ID
	END AS MIGRATION_CONTRACT_ID,
	m.MIGRATION_DT AS MIGRATION_DT,
	
	CASE 
		WHEN c.AGREEMENT_RK = m.AGREEMENT_RK THEN m.PREV_AGREEMENT_RK
		WHEN c.AGREEMENT_RK = r.AGREEMENT_RK THEN r.PREV_AGREEMENT_RK 
	END AS PREVIOUS_AGREEMENT_RK, 
	CASE 
		WHEN c.AGREEMENT_RK = m.AGREEMENT_RK THEN m.PREV_CONTRACT_ID
		WHEN c.AGREEMENT_RK = r.AGREEMENT_RK THEN r.PREV_CONTRACT_ID
	END AS PREVIOUS_CONTRACT_ID,
	
	CASE 
		WHEN c.AGREEMENT_RK = r.PREV_AGREEMENT_RK THEN r.AGREEMENT_RK
	END AS RESTR_AGREEMENT_RK, 
	CASE 
		WHEN c.AGREEMENT_RK = r.PREV_AGREEMENT_RK THEN r.CONTRACT_ID
	END AS RESTR_CONTRACT_ID,
	r.RESTR_DT AS RESTR_DT,
	
	c.ROOT_AGREEMENT_RK,
	c.SOURCE_SYSTEM_CD,
	CASE 
		WHEN MIGRATION_DT IS NOT NULL AND MIGRATION_AGREEMENT_RK IS NULL AND PREVIOUS_AGREEMENT_RK IS NOT NULL THEN MIGRATION_DT 
	ELSE c.ISSUE_DT END AS START_DT,
	CASE 
		WHEN RESTR_AGREEMENT_RK IS NOT NULL THEN MONTH_END(RESTR_DT)
		WHEN MIGRATION_AGREEMENT_RK IS NOT NULL THEN MIGRATION_DT - INTERVAL '1' DAY 
		WHEN DISPOSAL_DT IS NOT NULL THEN MONTH_END(DISPOSAL_DT)
	ELSE CURRENT_DATE END AS END_DT
　
FROM _contract c
　
	LEFT JOIN migration m
		ON (c.AGREEMENT_RK = m.AGREEMENT_RK) OR (c.AGREEMENT_RK = m.PREV_AGREEMENT_RK)
　
	LEFT JOIN restr r
		ON (c.AGREEMENT_RK = r.AGREEMENT_RK) OR (c.AGREEMENT_RK = r.PREV_AGREEMENT_RK)
　
	LEFT JOIN disposal d
		ON (c.AGREEMENT_RK = d.PREV_AGREEMENT_RK)
	
) WITH DATA PRIMARY INDEX (AGREEMENT_RK);
　
ALTER TABLE _contract_ ADD RESTR_AMT DECIMAL(21,5) DEFAULT 0.0;
UPDATE _contract_ 
FROM (
	SELECT DISTINCT
		c.AGREEMENT_RK, c.CONTRACT_AMT
	FROM _contract_ c
		WHERE c.RESTR_DT IS NOT NULL AND c.RESTR_AGREEMENT_RK IS NULL
) cc
SET 
	RESTR_AMT = cc.CONTRACT_AMT 
WHERE (_contract_.RESTR_AGREEMENT_RK = cc.AGREEMENT_RK);
　
COLLECT STATISTICS COLUMN AGREEMENT_RK, COLUMN BRANCH_ID, COLUMN ROOT_AGREEMENT_RK, COLUMN START_DT, COLUMN END_DT, 
COLUMN MIGRATION_AGREEMENT_RK, COLUMN MIGRATION_DT, COLUMN RESTR_AGREEMENT_RK, COLUMN RESTR_DT, COLUMN DISPOSAL_DT ON _contract_; 
--------запускать отсюда
DROP TABLE cts_out;
CREATE TABLE cts_out AS (
SELECT 
	c.AGREEMENT_RK, 
	r.REPORT_DT, 
	c.GENERATION, 
	c.BRANCH_ID, 
	c.POS_DEPT_RK,
	c.CUSTOMER_RK, 
	c.CUSTOMER_TYPE_CD,
	c.ISSUE_DT, 
	c.CLOSE_DT, 
	c.CONTRACT_ID, 
	c.CONTRACT_AMT,
	c.PRODUCT_ID,
	c.SUBPRODUCT_ID,
	c.DISPOSAL_DT,
	c.DISPOSAL_AMT, 
	c.DISPOSAL_TYPE, 
	c.MIGRATION_AGREEMENT_RK,
	c.MIGRATION_CONTRACT_ID,
	c.MIGRATION_DT,
	c.PREVIOUS_AGREEMENT_RK, 
	c.PREVIOUS_CONTRACT_ID,
	c.RESTR_AGREEMENT_RK,
	c.RESTR_CONTRACT_ID,
	c.RESTR_DT,
	c.RESTR_AMT,
	c.ROOT_AGREEMENT_RK,
	c.SOURCE_SYSTEM_CD, 
	c.START_DT,
	c.END_DT
FROM _report_date1 r
　
	INNER JOIN _contract_ c
		ON (r.REPORT_DT BETWEEN c.START_DT AND c.END_DT)
) WITH DATA PRIMARY INDEX (AGREEMENT_RK, REPORT_DT);
　
DROP TABLE cts_cust_global;
CREATE TABLE cts_cust_global AS (
SELECT DISTINCT 
	cc.CUSTOMER_RK, cc.CUSTOMER_GLOBAL_RK, 'Ч' AS CUSTOMER_TYPE_CD, UPPER(cc.LAST_NM||' '||cc.FIRST_NM||' '||cc.MIDDLE_NM) AS CUSTOMER_NM, cc.TAX_PAYER_NUM, cc.BIRTH_DT 
FROM CDM.CD_INDIVIDUAL_CUSTOMER cc
WHERE (CURRENT_DATE BETWEEN cc.EFFECTIVE_FROM_DTTM AND cc.EFFECTIVE_TO_DTTM) AND (cc.DELETED_FLG = '0') AND (cc.IS_ACTIVE_FLG = '1')
	AND EXISTS (	SEL DISTINCT c.CUSTOMER_RK FROM _contract_ c WHERE c.CUSTOMER_RK = cc.CUSTOMER_RK) 
　
UNION
　
SELECT DISTINCT 
	cc.CUSTOMER_RK, cc.CUSTOMER_GLOBAL_RK, 'Ю' AS CUSTOMER_TYPE_CD, UPPER(COALESCE(cc.ORGANIZATION_SHORT_NM, cc.ORGANIZATION_NM)) AS CUSTOMER_NM, cc.TAX_PAYER_NUM, NULL AS BIRTH_DT 
FROM CDM.CD_CORPORATE_CUSTOMER cc
WHERE (CURRENT_DATE BETWEEN cc.EFFECTIVE_FROM_DTTM AND cc.EFFECTIVE_TO_DTTM) AND (cc.DELETED_FLG = '0') AND (cc.IS_ACTIVE_FLG = '1')
	AND EXISTS (	SEL DISTINCT c.CUSTOMER_RK FROM _contract_ c WHERE c.CUSTOMER_RK = cc.CUSTOMER_RK) 
) WITH DATA PRIMARY INDEX (customer_rk);
COLLECT STATISTICS COLUMN CUSTOMER_RK, COLUMN CUSTOMER_NM ON cts_cust_global;
　
ALTER TABLE cts_out 
ADD TAX_PAYER_NUM VARCHAR(12) DEFAULT '',
ADD BRANCH_NM VARCHAR (100) DEFAULT '',
ADD POS_ID VARCHAR (8) DEFAULT '',
ADD REGION VARCHAR (100) DEFAULT '',
ADD POS_NM VARCHAR (250) DEFAULT '',
ADD DEBT_RUB_OLD DECIMAL (21,5) DEFAULT 0.0, 
ADD DEBT_RUB_PRI DECIMAL (21,5) DEFAULT 0.0, 
ADD DPD_OLD INTEGER DEFAULT NULL, 
ADD DPD INTEGER DEFAULT NULL, 
ADD DLQ_START_DT DATE DEFAULT NULL, 
ADD BKT_OLD INTEGER DEFAULT 1, 
ADD BKT INTEGER DEFAULT 1, 
ADD OVERDUE_AMT DECIMAL (21,5) DEFAULT 0,
ADD CUSTOMER_NM VARCHAR (250) DEFAULT '',
ADD BIRTH_DT DATE DEFAULT NULL;
　
COLLECT STATISTICS COLUMN AGREEMENT_RK, COLUMN REPORT_DT, COLUMN CLOSE_DT, 
	COLUMN PREVIOUS_AGREEMENT_RK, COLUMN MIGRATION_AGREEMENT_RK, COLUMN RESTR_AGREEMENT_RK, COLUMN ROOT_AGREEMENT_RK, COLUMN CUSTOMER_RK ON cts_out;
　
---------привязываем балансы
UPDATE cts_out 
FROM (
	SELECT 
		c.AGREEMENT_RK, c.REPORT_DT, COALESCE(b.PRI_BALANCE_RUR_AMT, 0) + COALESCE(b.OVERDUE_PRI_BALANCE_RUR_AMT, 0) AS DEBT_RUB_PRI 
	FROM ( 
		SELECT DISTINCT c.AGREEMENT_RK, c.REPORT_DT 
		FROM cts_out c
	) c
		
	LEFT JOIN CDM.FCT_LOAN_BALANCE b
		ON (c.AGREEMENT_RK = b.AGREEMENT_RK) AND (c.REPORT_DT <= b.EFFECTIVE_TO_DTTM AND b.DELETED_FLG = '0')
QUALIFY ROW_NUMBER() OVER (PARTITION BY c.AGREEMENT_RK, c.REPORT_DT ORDER BY b.EFFECTIVE_TO_DTTM) = 1
) cc
SET 
	DEBT_RUB_PRI = cc.DEBT_RUB_PRI
WHERE (cts_out.AGREEMENT_RK = cc.AGREEMENT_RK) AND (cts_out.REPORT_DT = cc.REPORT_DT);
　
------------ провешиваем просрочку
UPDATE cts_out 
FROM ( 
	SELECT 
		c.AGREEMENT_RK, c.REPORT_DT, df.DELINQUENCY_START_DT, c.REPORT_DT - df.DELINQUENCY_START_DT AS DPD, r.RANGE_ORDER_NUM, df.OVERDUE_RUR_AMT
	FROM ( 
		SELECT DISTINCT c.AGREEMENT_RK, c.REPORT_DT 
		FROM cts_out c
	) c
	
	LEFT JOIN ( 
		SELECT 
			df.AGREEMENT_RK, df.DELINQUENCY_START_DT, df.OVERDUE_RUR_AMT, df.EFFECTIVE_FROM_DTTM, df.EFFECTIVE_TO_DTTM, df.PROCESSED_DTTM
		FROM CDM.FCT_DELINQUENCY df
		WHERE df.DELINQUENCY_METHOD_CD = 'FIFO' AND df.DELINQUENCY_TYPE_CD = 'PRI' AND df.OVERDUE_RUR_AMT > 0 AND df.DELETED_FLG = 0
	) df
	ON (c.AGREEMENT_RK = df.AGREEMENT_RK) AND (c.REPORT_DT BETWEEN df.EFFECTIVE_FROM_DTTM AND df.EFFECTIVE_TO_DTTM)
	
	LEFT JOIN dlq_rng_old r
		ON (COALESCE(DPD,-1) BETWEEN r.RANGE_BEGIN_DAYS_CNT AND r.RANGE_END_DAYS_CNT)
	QUALIFY ROW_NUMBER() OVER (PARTITION BY c.REPORT_DT, c.AGREEMENT_RK ORDER BY df.EFFECTIVE_FROM_DTTM DESC, df.PROCESSED_DTTM DESC) = 1
) cc
　
SET 
	OVERDUE_AMT = cc.OVERDUE_RUR_AMT, DPD = cc.DPD, DLQ_START_DT = cc.DELINQUENCY_START_DT, 
	BKT = CASE 
					WHEN (MONTH_END(DISPOSAL_DT) = cc.REPORT_DT) OR (DISPOSAL_DT = cc.REPORT_DT) THEN 9 
					WHEN (RESTR_AGREEMENT_RK IS NOT NULL) AND ((MONTH_END(RESTR_DT) = cc.REPORT_DT) OR (RESTR_DT = cc.REPORT_DT)) THEN 10 
					WHEN DEBT_RUB_PRI = 0 THEN 0 
				ELSE cc.RANGE_ORDER_NUM END
WHERE (cts_out.AGREEMENT_RK = cc.AGREEMENT_RK) AND (cts_out.REPORT_DT = cc.REPORT_DT);
　
-----------пробиваем лаг
UPDATE cts_out 
FROM (
SELECT DISTINCT
	c.AGREEMENT_RK, c.REPORT_DT, 
	
	CASE WHEN MONTH_END(ISSUE_DT) = REPORT_DT THEN 0
		ELSE  MAX(C.DEBT_RUB_PRI) OVER (PARTITION BY C.ROOT_AGREEMENT_RK ORDER BY C.REPORT_DT, c.ISSUE_DT ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING) 
	END AS DEBT_RUB_PRI, 
	
	CASE WHEN MONTH_END(ISSUE_DT) ^= REPORT_DT
		THEN MAX(C.DPD) OVER (PARTITION BY C.ROOT_AGREEMENT_RK ORDER BY C.REPORT_DT, c.ISSUE_DT ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING) 
	END AS DPD, 
	
	CASE WHEN MONTH_END(ISSUE_DT) = REPORT_DT THEN 1
		ELSE 	MAX(C.BKT) OVER (PARTITION BY C.ROOT_AGREEMENT_RK ORDER BY C.REPORT_DT, c.ISSUE_DT ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING) 
	END AS BKT
FROM cts_out c
) cc
　
SET 
	DEBT_RUB_OLD = COALESCE(cc.DEBT_RUB_PRI,0), DPD_OLD = cc.DPD, BKT_OLD = COALESCE(cc.BKT,0)
WHERE (cts_out.AGREEMENT_RK = cc.AGREEMENT_RK) AND (cts_out.REPORT_DT = cc.REPORT_DT);
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------прибиваем клиентов

UPDATE cts_out
FROM cts_cust_global cc
SET
	TAX_PAYER_NUM = cc.TAX_PAYER_NUM, CUSTOMER_NM = TD_SYSFNLIB.OREPLACE(cc.CUSTOMER_NM,'ИНДИВИДУАЛЬНЫЙ ПРЕДПРИНИМАТЕЛЬ','ИП'), BIRTH_DT = cc.BIRTH_DT 
WHERE (cts_out.CUSTOMER_RK = cc.CUSTOMER_RK);
　
UPDATE cts_out 
FROM pos p
SET
	BRANCH_NM = p.BRANCH_NM, POS_ID = p.POS_ID, POS_NM = p.POS_NM, REGION = p.REGION
WHERE (cts_out.POS_DEPT_RK = p.ORG_RK);
　
　
------------------------------------------------------------
--запрос для файла востриков обороты данные + анализ
/*
SELECT
c.AGREEMENT_RK, REPORT_DT, GENERATION, 
BRANCH_ID, BRANCH_NM, 
REGION, 
POS_ID, POS_NM, 
CUSTOMER_RK, CUSTOMER_TYPE_CD, CUSTOMER_NM, TAX_PAYER_NUM, 
CONTRACT_ID, ISSUE_DT, CLOSE_DT, 
CASE WHEN CONTRACT_ID LIKE '%КР%' THEN 1 ELSE 0 END AS "ЦФТ", 
CONTRACT_AMT, 
PRODUCT_ID, SUBPRODUCT_ID, 
CASE WHEN p.AGREEMENT_RK  IS NOT NULL THEN 1 ELSE 0 END AS PL_FLG,
DISPOSAL_DT, DISPOSAL_AMT, DISPOSAL_TYPE, 
DEBT_RUB_OLD AS DEBT_OLD, 
DEBT_RUB_PRI AS DEBT_NEW, 
DLQ_START_DT, 
DPD_OLD, 
DPD AS DPD_NEW, 
BKT_OLD, 
BKT AS BKT_NEW, 
OVERDUE_AMT
FROM cts_out c 
LEFT JOIN 
(SELECT DISTINCT p.AGREEMENT_RK FROM vostrikovgs.issue_pl p) p
ON c.AGREEMENT_RK = p.AGREEMENT_RK
WHERE c.REPORT_DT = DATE '2016-12-31' 
ORDER BY c.PRODUCT_ID, c.GENERATION, c.AGREEMENT_RK
*/

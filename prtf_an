--отчетные даты 
DROP TABLE _report_date1;
CREATE TABLE _report_date1 AS ( 
SELECT DISTINCT MONTH_END(CALENDAR_DT) AS REPORT_DT 
FROM DDS.DIM_CALENDAR 
WHERE CALENDAR_DT BETWEEN DATE '2007-12-31' AND CURRENT_DATE - EXTRACT(DAY FROM CURRENT_DATE)
UNION SELECT MONTH_END(CURRENT_DATE) FROM dua
) WITH DATA PRIMARY INDEX (REPORT_DT);
COLLECT STATISTICS COLUMN REPORT_DT ON _report_date1;

--бакеты просрочки натуральные
DROP TABLE dlq_rng_old;
CREATE TABLE dlq_rng_old AS (
SELECT DISTINCT RANGE_ORDER_NUM+1 AS RANGE_ORDER_NUM, RANGE_BEGIN_DAYS_CNT, 
CASE WHEN dr.RANGE_ORDER_NUM < 6 THEN dr.RANGE_END_DAYS_CNT ELSE 9999 END AS RANGE_END_DAYS_CNT 
FROM CDM.MREF_DELINQUENCY_RANGE dr
WHERE dr.DELINQUENCY_RANGE_SET_CD = '140' AND dr.IS_ACTIVE_FLG = '1' AND dr.RANGE_ORDER_NUM < 7
) WITH DATA PRIMARY INDEX (RANGE_BEGIN_DAYS_CNT, RANGE_END_DAYS_CNT);
COLLECT STATISTICS COLUMN RANGE_ORDER_NUM, COLUMN RANGE_BEGIN_DAYS_CNT, COLUMN RANGE_END_DAYS_CNT ON dlq_rng_old;

--список всех существовавших договоров Бисквит по нашим продуктам
DROP TABLE _contract;
CREATE  TABLE _contract AS (
SELECT DISTINCT c.AGREEMENT_RK, c.SOURCE_SYSTEM_CD AS BRANCH_ID, 
CASE WHEN c.CLOSE_DT < CURRENT_DATE THEN c.CLOSE_DT ELSE c.CLOSE_PLAN_DT END AS CLOSE_DT, 
COALESCE(SUM(lim.CREDIT_LIMIT_AMT) OVER (PARTITION BY c.AGREEMENT_RK), c.CONTRACT_AMT) AS CONTRACT_AMT, 
c.CONTRACT_ID, c.CUSTOMER_RK, TRUNC(COALESCE(c.MIGRATION_OPEN_DT, c.ISSUE_DT), 'mm') AS GENERATION, 
COALESCE(c.MIGRATION_OPEN_DT, c.ISSUE_DT) AS ISSUE_DT, COALESCE(c.MIGRATION_OPEN_DT, c.OPEN_DT) AS OPEN_DT,
COALESCE(c.INIT_INTERNAL_ORG_2_RK, c.INIT_INTERNAL_ORG_RK) AS POS_DEPT_RK,
CASE WHEN c.PRODUCT_OPERATIONAL_ID = 'ПШ' THEN '080. 136. Коммерсант ФЛ. Предодобренные' 
WHEN c.PRODUCT_OPERATIONAL_ID LIKE 'П%' THEN '080. 058. Коммерсант ФЛ' 
WHEN c.PRODUCT_OPERATIONAL_ID = 'МН' AND c.PRODUCT_SUB_ID NOT IN ('10,МН,00009','10,МН,00010') THEN '080. 057. Коммерсант ЮЛ'
WHEN c.PRODUCT_OPERATIONAL_ID IN ('РЦ','РЮ') THEN '080. 558. Коммерсант ФЛ. Реструктуризация' 
WHEN c.PRODUCT_OPERATIONAL_ID IN ('РЛ','РМ') OR c.PRODUCT_SUB_ID IN ('10,МН,00009','10,МН,00010') THEN '080. 557. Коммерсант ЮЛ. Реструктуризация' 
ELSE c.PRODUCT_OPERATIONAL_ID END AS PRODUCT_ID, c.PRODUCT_SUB_ID AS SUBPRODUCT_ID
FROM DDS.CONTRACT_LN c
LEFT JOIN DDS.AGREEMENT_CREDIT_LIMIT_HIST lim
	ON (lim.AGREEMENT_RK = c.AGREEMENT_RK) AND (lim.AGREEMENT_TYPE_CD = c.CONTRACT_TYPE_CD) AND (lim.START_DT = c.ISSUE_DT)
	AND (CURRENT_DATE BETWEEN lim.EFFECTIVE_FROM_DTTM AND lim.EFFECTIVE_TO_DTTM) AND (lim.DELETED_FLG = '0') AND (lim.IS_ACTIVE_FLG = '1')
WHERE c.CONTRACT_TYPE_CD = 'КРЕДИТ'
AND (c.CONTRACT_STATUS_CD NOT IN ('АНКЛ', 'БВВД', 'БВВЗ', 'ВВЕД', 'ВВИВ', 'ВВРВ'))
AND (c.PRODUCT_OPERATIONAL_ID IN ('МН', 'ПМ', 'ПЭ', 'ПШ', 'ПЯ', 'РЛ', 'РМ', 'РЦ', 'РЮ'))
AND c.DELETED_FLG = '0'

UNION

SELECT 
c.AGREEMENT_RK, c.BRANCH_CD AS BRANCH_ID, CASE WHEN c.CLOSE_DT < CURRENT_DATE THEN c.CLOSE_DT ELSE c.CLOSE_PLAN_DT END AS CLOSE_DT, 
COALESCE(lim.LOAN_LIMIT_AMT, c.CONTRACT_AMT) AS CONTRACT_AMT, c.CONTRACT_NUM AS CONTRACT_ID, c.CUSTOMER_RK, TRUNC(c.ISSUE_DT, 'mm') AS GENERATION, 
c.ISSUE_DT, c.OPEN_DT, io.BIS_INTERNAL_ORG_RK AS POS_DEPT_RK, 
CASE WHEN c.PRODUCT_CD IN ('0403.29#1575368617', '0403.30#1575368627') AND COALESCE(c.PRODUCT_SUB_ID, '10,МН,') NOT IN ('10,МН,00009','10,МН,00010') THEN '080. 057. Коммерсант ЮЛ'
WHEN c.PRODUCT_CD IN ('0403.27#1575368597') OR c.PRODUCT_SUB_ID IN ('10,МН,00009','10,МН,00010') THEN '080. 557. Коммерсант ЮЛ. Реструктуризация' 
END AS PRODUCT_ID, c.PRODUCT_SUB_ID AS SUBPRODUCT_ID
FROM DDS.CONTRACT_LN_CFT_HIST c
	LEFT JOIN dds.INTERNAL_ORG_CFT_HIST io
			ON io.INTERNAL_ORG_ID = c.INIT_INTERNAL_ORG_ID
				AND CURRENT_DATE BETWEEN io.EFFECTIVE_FROM_DTTM AND io.EFFECTIVE_TO_DTTM
				AND io.DELETED_FLG = '0'
	LEFT JOIN DDS.CONTRACT_LN_LIMIT_CFT_HIST lim
			ON lim.AGREEMENT_RK = c.AGREEMENT_RK
				AND CURRENT_DATE BETWEEN lim.EFFECTIVE_FROM_DTTM AND lim.EFFECTIVE_TO_DTTM
				AND lim.DELETED_FLG = '0'
				AND lim.LOAN_LIMIT_AMT > 0
WHERE
	c.CONTRACT_TYPE_CD = 'LOAN'
	AND c.PRODUCT_CD IN ('0403.27#1575368597', '0403.29#1575368617', '0403.30#1575368627')
	AND c.TRANCHE_NUM = '1' AND ROOT_AGREEMENT_RK = -1 AND CESSION_CONTRACT_NUM IS NULL 
	AND c.SOURCE_SYSTEM_CD = '90974'
	AND CURRENT_DATE BETWEEN c.EFFECTIVE_FROM_DTTM AND c.EFFECTIVE_TO_DTTM
	AND NOT (c.CONTRACT_AMT = 0.0 AND c.CONTRACT_STATUS_CD = 'CLOSE')
	AND COALESCE(c.CONTRACT_STATUS_CD, 'WORK') NOT IN ('WAIT_CONF')
QUALIFY ROW_NUMBER() OVER (PARTITION BY c.AGREEMENT_RK, c.PRODUCT_SUB_ID ORDER BY lim.START_DT DESC) = 1
) WITH DATA PRIMARY INDEX (AGREEMENT_RK);
COLLECT STATISTICS COLUMN BRANCH_ID, COLUMN ISSUE_DT, COLUMN CLOSE_DT, COLUMN AGREEMENT_RK ON _contract;

--мигрировавшие договоры
DROP TABLE migration;
CREATE TABLE migration AS (
SELECT 
c.AGREEMENT_RK AS PREV_AGREEMENT_RK, 
c.CONTRACT_ID AS PREV_CONTRACT_ID,
ch.AGREEMENT_RK AS AGREEMENT_RK, 
ch.AGREEMENT_ID AS CONTRACT_ID, 
ch.OPEN_DT AS MIGRATION_DT
FROM _contract c
INNER JOIN CDM.AGREEMENT_CHAIN_HIST ch
ON c.AGREEMENT_RK = ch.PREVIOUS_AGREEMENT_RK
AND ch.AGREEMENT_CHAIN_TYPE_CD = 'MIGRATIONS' 
AND ch.TRANSFORMATION_TYPE_CD = 'MIGRATION'
AND ch.IS_ACTIVE_FLG = '1'
AND ch.DELETED_FLG = '0'
) WITH DATA PRIMARY INDEX (PREV_AGREEMENT_RK, AGREEMENT_RK);
COLLECT STATISTICS COLUMN PREV_AGREEMENT_RK, COLUMN AGREEMENT_RK, COLUMN MIGRATION_DT ON migration;

--реструктурированые договоры 
DROP TABLE restr;
CREATE TABLE restr AS (
SELECT 
c.AGREEMENT_RK AS PREV_AGREEMENT_RK, 
c.CONTRACT_ID AS PREV_CONTRACT_ID,
ch.AGREEMENT_RK AS AGREEMENT_RK, 
ch.AGREEMENT_ID AS CONTRACT_ID, 
ch.OPEN_DT AS RESTR_DT
--COALESCE(cln.PRODUCT_OPERATIONAL_ID, CASE WHEN clnc.PRODUCT_CD IN ('0403.27#1575368597') OR clnc.PRODUCT_SUB_ID IN ('10,МН,00009','10,МН,00010') THEN 'РЛ' END) AS PRODUCT_OPERATIONAL_ID, 
--COALESCE(cln.PRODUCT_SUB_ID, clnc.PRODUCT_SUB_ID) AS PRODUCT_SUB_ID, 
FROM _contract c
INNER JOIN CDM.AGREEMENT_CHAIN_HIST ch
ON SUBSTR(c.PRODUCT_ID, 6,1) = '0' --берем только 080. 057 и 080. 058 - коммерсы
AND c.AGREEMENT_RK = ch.PREVIOUS_AGREEMENT_RK
AND ch.TRANSFORMATION_TYPE_CD LIKE 'RESTR%'
AND ch.IS_ACTIVE_FLG = '1'
AND ch.DELETED_FLG = '0'
) WITH DATA PRIMARY INDEX (PREV_AGREEMENT_RK, AGREEMENT_RK);
COLLECT STATISTICS COLUMN PREV_AGREEMENT_RK, COLUMN AGREEMENT_RK, COLUMN RESTR_DT ON restr;

--списанные/проданные договоры с просрочкой на дату списания
DROP TABLE disposal;
CREATE TABLE disposal AS (
SELECT
c.AGREEMENT_RK AS PREV_AGREEMENT_RK, 
c.CONTRACT_ID AS PREV_CONTRACT_ID, 
d.MIGR_ROOT_AGREEMENT_RK,
d.ENTRY_DT AS DISPOSAL_DT, --дата списания/продажи
d.DISPOSAL_TYPE_CD,
COALESCE(d.PRI_BALANCE_RUR_AMT, 0) + COALESCE(d.OVERDUE_PRI_BALANCE_RUR_AMT, 0) AS DEBT_RUB_PRI, --ОД на дату списания
COALESCE(d.INT_BALANCE_RUR_AMT, 0) + COALESCE(d.OVERDUE_INT_BALANCE_RUR_AMT, 0) AS DEBT_RUB_INT --% на дату списания
FROM _contract c
INNER JOIN CDM.FCT_LOAN_DISPOSAL d
ON c.AGREEMENT_RK = d.AGREEMENT_RK
AND d.DELETED_FLG = 0
) WITH DATA PRIMARY INDEX (PREV_AGREEMENT_RK, MIGR_ROOT_AGREEMENT_RK);
COLLECT STATISTICS COLUMN PREV_AGREEMENT_RK, COLUMN MIGR_ROOT_AGREEMENT_RK, COLUMN DISPOSAL_DT ON disposal;

DROP TABLE _contract_; 
CREATE TABLE _contract_ AS (
SELECT 
c.AGREEMENT_RK, c.BRANCH_ID, c.CLOSE_DT, 
c.CONTRACT_AMT, c.CONTRACT_ID, c.CUSTOMER_RK, c.GENERATION, 
c.ISSUE_DT, c.OPEN_DT, c.POS_DEPT_RK, c.PRODUCT_ID, c.SUBPRODUCT_ID,

CASE WHEN c.AGREEMENT_RK = m.AGREEMENT_RK THEN m.PREV_AGREEMENT_RK
WHEN c.AGREEMENT_RK = r.AGREEMENT_RK THEN r.PREV_AGREEMENT_RK
ELSE -1 END AS PREV_AGREEMENT_RK, 
CASE WHEN c.AGREEMENT_RK = m.AGREEMENT_RK THEN m.PREV_CONTRACT_ID
WHEN c.AGREEMENT_RK = r.AGREEMENT_RK THEN r.PREV_CONTRACT_ID
ELSE -1 END AS PREV_CONTRACT_ID,
CASE WHEN c.AGREEMENT_RK = m.PREV_AGREEMENT_RK THEN m.AGREEMENT_RK
ELSE -1 END AS MIGRATION_AGREEMENT_RK, 
CASE WHEN c.AGREEMENT_RK = m.PREV_AGREEMENT_RK THEN m.CONTRACT_ID
ELSE -1 END AS MIGRATION_CONTRACT_ID,
COALESCE(m.MIGRATION_DT, DATE '1900-01-01') AS MIGRATION_DT,

CASE WHEN c.AGREEMENT_RK = r.PREV_AGREEMENT_RK THEN r.AGREEMENT_RK
ELSE -1 END AS RESTR_AGREEMENT_RK, 
CASE WHEN c.AGREEMENT_RK = r.PREV_AGREEMENT_RK THEN r.CONTRACT_ID
ELSE -1 END AS RESTR_CONTRACT_ID,
COALESCE(r.RESTR_DT, DATE '1900-01-01') AS RESTR_DT

FROM _contract c

LEFT JOIN migration m
ON (c.AGREEMENT_RK = m.AGREEMENT_RK) OR (c.AGREEMENT_RK = m.PREV_AGREEMENT_RK)

LEFT JOIN restr r
ON (c.AGREEMENT_RK = r.AGREEMENT_RK) OR (c.AGREEMENT_RK = r.PREV_AGREEMENT_RK)

) WITH DATA PRIMARY INDEX (AGREEMENT_RK);
COLLECT STATISTICS COLUMN AGREEMENT_RK, COLUMN BRANCH_ID, COLUMN PREV_AGREEMENT_RK, COLUMN ISSUE_DT, COLUMN CLOSE_DT, 
COLUMN MIGRATION_AGREEMENT_RK, COLUMN MIGRATION_DT, COLUMN RESTR_AGREEMENT_RK, COLUMN RESTR_DT ON _contract_; 
GRANT SELECT ON _contract_ TO butev;

--договоры, размазанные по датам, с балансами
DROP TABLE cts_out;
CREATE TABLE cts_out AS (
SELECT r.REPORT_DT, c.AGREEMENT_RK, c.GENERATION, c.BRANCH_ID, c.CONTRACT_ID, c.CONTRACT_AMT, c.OPEN_DT, c.ISSUE_DT, c.CLOSE_DT, c.PRODUCT_ID, c.SUBPRODUCT_ID, 
COALESCE(b.PRI_BALANCE_RUR_AMT, 0) + COALESCE(b.OVERDUE_PRI_BALANCE_RUR_AMT, 0) AS DEBT_RUB_PRI,
COALESCE(b.INT_BALANCE_RUR_AMT, 0) + COALESCE(b.OVERDUE_INT_BALANCE_RUR_AMT, 0) AS DEBT_RUB_INT,
c.o_REPORT_DT, c.o_T, CASE WHEN c.o_T = 'MIGRATION' AND LENGTH(BRANCH_ID) = 3 THEN c.PREV_AGREEMENT_RK ELSE c.o_AGREEMENT_RK END AS o_AGREEMENT_RK, c.o_CONTRACT_ID, c.o_DT, c.o_RNG
FROM _report_date1 r
INNER JOIN _contract_ c

ON r.REPORT_DT BETWEEN 
CASE WHEN c.o_T = 'MIGRATION' AND LENGTH(c.BRANCH_ID) = 3 THEN c.o_DT ELSE c.ISSUE_DT END
AND MONTH_END(c.CLOSE_DT)

LEFT JOIN CDM.FCT_LOAN_BALANCE b
ON c.AGREEMENT_RK = b.AGREEMENT_RK
AND r.REPORT_DT <= b.EFFECTIVE_TO_DTTM
AND b.DELETED_FLG = '0'
QUALIFY ROW_NUMBER() OVER (PARTITION BY c.AGREEMENT_RK, r.REPORT_DT ORDER BY b.EFFECTIVE_TO_DTTM) = 1
) WITH DATA PRIMARY INDEX (AGREEMENT_RK, REPORT_DT);
COLLECT STATISTICS COLUMN REPORT_DT, COLUMN CLOSE_DT, COLUMN AGREEMENT_RK ON cts_out;

ALTER TABLE cts_out ADD OVERDUE_AMT INTEGER DEFAULT 0, ADD DPD INTEGER DEFAULT 0, ADD DLQ_START_DT DATE DEFAULT NULL, ADD BKT INTEGER DEFAULT 1;

UPDATE cts_out 
FROM (
SELECT c.AGREEMENT_RK, c.REPORT_DT, df.DELINQUENCY_START_DT, c.REPORT_DT - df.DELINQUENCY_START_DT AS DPD,
CASE WHEN c.REPORT_DT >= c.CLOSE_DT THEN 0 ELSE r.RANGE_ORDER_NUM END AS RANGE_ORDER_NUM, df.OVERDUE_RUR_AMT
FROM 
(SELECT DISTINCT c.AGREEMENT_RK, c.REPORT_DT, c.CLOSE_DT 
FROM cts_out c
) c
LEFT JOIN (
SELECT df.AGREEMENT_RK, df.DELINQUENCY_START_DT, df.OVERDUE_RUR_AMT, df.EFFECTIVE_FROM_DTTM, df.EFFECTIVE_TO_DTTM, df.PROCESSED_DTTM
FROM CDM.FCT_DELINQUENCY df
WHERE df.DELINQUENCY_METHOD_CD = 'FIFO'
AND df.DELINQUENCY_TYPE_CD = 'PRI'  --IN ('PRI','PRI_CORR')
AND df.OVERDUE_RUR_AMT > 0
AND df.DELETED_FLG = 0
) df
ON c.AGREEMENT_RK = df.AGREEMENT_RK
AND c.REPORT_DT BETWEEN df.EFFECTIVE_FROM_DTTM AND df.EFFECTIVE_TO_DTTM
LEFT JOIN dlq_rng_old r
ON COALESCE(DPD,-1) BETWEEN r.RANGE_BEGIN_DAYS_CNT AND r.RANGE_END_DAYS_CNT
QUALIFY ROW_NUMBER() OVER (PARTITION BY c.REPORT_DT, c.AGREEMENT_RK ORDER BY df.EFFECTIVE_FROM_DTTM DESC, df.PROCESSED_DTTM DESC) = 1
) cc
SET OVERDUE_AMT = cc.OVERDUE_RUR_AMT,
DPD = cc.DPD,
DLQ_START_DT = cc.DELINQUENCY_START_DT,
BKT = cc.RANGE_ORDER_NUM
WHERE cts_out.AGREEMENT_RK = cc.AGREEMENT_RK 
AND cts_out.REPORT_DT = cc.REPORT_DT;
COLLECT STATISTICS COLUMN BKT, COLUMN REPORT_DT, COLUMN CLOSE_DT, COLUMN AGREEMENT_RK ON cts_out;

　
DROP TABLE cts_roll;
CREATE TABLE cts_roll AS (
SELECT c.REPORT_DT, c.AGREEMENT_RK, c.CONTRACT_ID, c.o_CONTRACT_ID, c.GENERATION, c.BRANCH_ID, c.CONTRACT_AMT, 
c.PRODUCT_ID, c.SUBPRODUCT_ID, c.CLOSE_DT, c.DEBT_RUB_PRI, c.DEBT_RUB_INT, c.OVERDUE_AMT, c.DPD, 

COALESCE(
CASE WHEN LENGTH(BRANCH_ID) = 5 AND c.o_T = 'RESTRUCT' THEN 10 
			WHEN LENGTH(BRANCH_ID) = 5 AND c.o_T IN ('WRITEOFF', 'REALIZE', 'PACKAGE') THEN 9 --Со списаниями какая-то херотень. Надо разобраться. Но сначала выгрузить обычные бакеты.
ELSE NULL END, 
c.BKT) AS BKT,

ZEROIFNULL( COALESCE(
MAX(C.DEBT_RUB_PRI) OVER (PARTITION BY C.AGREEMENT_RK ORDER BY C.REPORT_DT ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING), 
CASE WHEN LENGTH(BRANCH_ID) = 3 AND c.o_T = 'MIGRATION' THEN --тут надо везде дописать условие на миграцию
	(SELECT MAX(d.DEBT_RUB_PRI) FROM cts_out d 
	WHERE d.REPORT_DT = c.REPORT_DT- EXTRACT(DAY FROM c.REPORT_DT) 
	AND d.AGREEMENT_RK = (SELECT e.PREV_AGREEMENT_RK FROM _contract_ e 
													WHERE e.AGREEMENT_RK = c.AGREEMENT_RK)
	) END )) AS DEBT_PRI_OLD, 
	
ZEROIFNULL( COALESCE(
MAX(C.DEBT_RUB_INT) OVER (PARTITION BY C.AGREEMENT_RK ORDER BY C.REPORT_DT ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING), 
CASE WHEN LENGTH(BRANCH_ID) = 3 AND c.o_T = 'MIGRATION' THEN 
	(SELECT MAX(d.DEBT_RUB_INT) FROM cts_out d 
	WHERE d.REPORT_DT = c.REPORT_DT- EXTRACT(DAY FROM c.REPORT_DT) 
	AND d.AGREEMENT_RK = (SELECT e.PREV_AGREEMENT_RK FROM _contract_ e 
													WHERE e.AGREEMENT_RK = c.AGREEMENT_RK)
	) END )) AS DEBT_INT_OLD, 
	
ZEROIFNULL( COALESCE( 
MAX(C.OVERDUE_AMT) OVER (PARTITION BY C.AGREEMENT_RK ORDER BY C.REPORT_DT ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING), 
CASE WHEN LENGTH(BRANCH_ID) = 3 AND c.o_T = 'MIGRATION' THEN 
	(SELECT MAX(d.OVERDUE_AMT) FROM cts_out d 
	WHERE d.REPORT_DT = c.REPORT_DT- EXTRACT(DAY FROM c.REPORT_DT) 
	AND d.AGREEMENT_RK = (SELECT e.PREV_AGREEMENT_RK FROM _contract_ e WHERE e.AGREEMENT_RK = c.AGREEMENT_RK)
	) END )) AS OVERDUE_OLD, 
	
ZEROIFNULL( COALESCE( 
MAX(C.DPD) OVER (PARTITION BY C.AGREEMENT_RK ORDER BY C.REPORT_DT ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING), 
CASE WHEN LENGTH(BRANCH_ID) = 3 AND c.o_T = 'MIGRATION' THEN 
	(SELECT MAX(d.DPD) FROM cts_out d 
	WHERE d.REPORT_DT = c.REPORT_DT- EXTRACT(DAY FROM c.REPORT_DT) 
	AND d.AGREEMENT_RK = (SELECT e.PREV_AGREEMENT_RK FROM _contract_ e WHERE e.AGREEMENT_RK = c.AGREEMENT_RK)
	) END )) AS DPD_OLD, 
	
COALESCE( COALESCE( 
MAX(C.BKT) OVER (PARTITION BY C.AGREEMENT_RK ORDER BY C.REPORT_DT ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING),
CASE WHEN LENGTH(BRANCH_ID) = 3 AND c.o_T = 'MIGRATION' THEN 
	(SELECT MAX(d.BKT) FROM cts_out d WHERE d.REPORT_DT = c.REPORT_DT- EXTRACT(DAY FROM c.REPORT_DT) AND d.AGREEMENT_RK = (SELECT e.PREV_AGREEMENT_RK FROM _contract_ e WHERE e.AGREEMENT_RK = c.AGREEMENT_RK)) END
	),1) AS BKT_OLD 
	
FROM cts_out c
GROUP BY c.REPORT_DT, c.AGREEMENT_RK, c.CONTRACT_ID, c.o_CONTRACT_ID, c.GENERATION, c.BRANCH_ID, c.CONTRACT_AMT, c.PRODUCT_ID, c.SUBPRODUCT_ID, c.CLOSE_DT, 
c.DEBT_RUB_PRI, c.DEBT_RUB_INT, c.OVERDUE_AMT, c.DPD, c.o_T,c.BKT
) WITH DATA;

--------------------
--DROP TABLE dlq_rng_old; DROP TABLE _contract; DROP TABLE migration; DROP TABLE restr; DROP TABLE disposal; DROP TABLE cts_out;

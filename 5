--бакеты просрочки натуральные
DROP TABLE dlq_rng_old;
CREATE TABLE dlq_rng_old AS (
SELECT RANGE_ORDER_NUM+1 AS RANGE_ORDER_NUM, RANGE_BEGIN_DAYS_CNT, 
CASE WHEN dr.RANGE_ORDER_NUM < 6 THEN dr.RANGE_END_DAYS_CNT ELSE 9999 END AS RANGE_END_DAYS_CNT 
FROM CDM.MREF_DELINQUENCY_RANGE dr
WHERE dr.DELINQUENCY_RANGE_SET_CD = '140' AND dr.IS_ACTIVE_FLG = '1' AND dr.RANGE_ORDER_NUM < 7
) WITH DATA;

--список всех существовавших договоров по нашим продуктам
DROP TABLE _contract;
CREATE  TABLE _contract AS (
SELECT DISTINCT c.AGREEMENT_RK, TRUNC(COALESCE(c.MIGRATION_OPEN_DT, c.ISSUE_DT), 'mm') AS GENERATION, 
c.SOURCE_SYSTEM_CD AS BRANCH_ID, c.CONTRACT_ID, c.CONTRACT_AMT, COALESCE(c.INIT_INTERNAL_ORG_2_RK, c.INIT_INTERNAL_ORG_RK) AS POS_DEPT_RK,
COALESCE(c.MIGRATION_OPEN_DT, c.OPEN_DT) AS OPEN_DT, COALESCE(c.MIGRATION_OPEN_DT, c.ISSUE_DT) AS ISSUE_DT, c.CLOSE_DT, c.CLOSE_PLAN_DT,
CASE WHEN c.PRODUCT_OPERATIONAL_ID = 'ПШ' THEN '080. 136. Коммерсант ФЛ. Предодобренные' 
WHEN c.PRODUCT_OPERATIONAL_ID LIKE 'П%' THEN '080. 058. Коммерсант ФЛ' 
WHEN c.PRODUCT_OPERATIONAL_ID = 'МН' AND c.PRODUCT_SUB_ID NOT IN ('10,МН,00009','10,МН,00010') THEN '080. 057. Коммерсант ЮЛ'
WHEN c.PRODUCT_OPERATIONAL_ID IN ('РЦ','РЮ') THEN '080. 558. Коммерсант ФЛ. Реструктуризация' 
WHEN c.PRODUCT_OPERATIONAL_ID IN ('РЛ','РМ') OR c.PRODUCT_SUB_ID IN ('10,МН,00009','10,МН,00010') THEN '080. 557. Коммерсант ЮЛ. Реструктуризация' 
ELSE c.PRODUCT_OPERATIONAL_ID END AS PRODUCT_ID, c.PRODUCT_SUB_ID AS SUBPRODUCT_ID, c.CONTRACT_STATUS_CD
FROM DDS.CONTRACT_LN c
WHERE c.CONTRACT_TYPE_CD = 'КРЕДИТ'
AND (c.CONTRACT_STATUS_CD NOT IN ('АНКЛ', 'БВВД', 'БВВЗ', 'ВВЕД', 'ВВИВ', 'ВВРВ', 'ВВРД'))
AND (c.PRODUCT_OPERATIONAL_ID IN ('МН', 'ПМ', 'ПЭ', 'ПШ', 'ПЯ', 'РЛ', 'РМ', 'РЦ', 'РЮ')) --OR c.PRODUCT_SUB_ID IN ('19,Р5,1XX08','19,Р5,1XX13'))
AND c.DELETED_FLG = '0'
) WITH DATA ;

--отчетные даты
DROP TABLE _report_date1;
CREATE VOLATILE TABLE _report_date1 AS ( 
SELECT MONTH_END (GENERATION) AS REPORT_DT
FROM _contract 
WHERE REPORT_DT <= (CURRENT_DATE - EXTRACT(DAY FROM CURRENT_DATE))
UNION SELECT CURRENT_DATE AS REPORT_DT FROM dua
GROUP BY REPORT_DT
) WITH DATA ON COMMIT PRESERVE ROWS;

--мигрировавшие договоры с просрочкой на конец месяца, предшествующего дате миграции
DROP TABLE migration;
CREATE TABLE migration AS (
SELECT MONTH_END(ch.OPEN_DT) AS REPORT_DT, --конец месяца, в котором произошла миграция
c.AGREEMENT_RK AS PREV_AGREEMENT_RK, c.CLOSE_DT, ch.AGREEMENT_RK AS MIGR_AGREEMENT_RK, 
ch.AGREEMENT_ID AS MIGR_CONTRACT_ID, ch.OPEN_DT AS MIGRATION_DT, r.RANGE_ORDER_NUM AS RANGE_ORDER_NUM_OLD, 
ch.OPEN_DT - EXTRACT(DAY FROM ch.OPEN_DT) - df.DELINQUENCY_START_DT AS DPD_OLD, df.OVERDUE_RUR_AMT AS OVERDUE_AMT_OLD
FROM _contract c
INNER JOIN CDM.AGREEMENT_CHAIN_HIST ch
ON c.AGREEMENT_RK = ch.ROOT_AGREEMENT_RK
AND ch.AGREEMENT_CHAIN_TYPE_CD = 'MIGRATIONS' 
AND ch.TRANSFORMATION_TYPE_CD = 'MIGRATION'
LEFT JOIN CDM.FCT_DELINQUENCY df
ON c.AGREEMENT_RK = df.AGREEMENT_RK
AND df.DELINQUENCY_METHOD_CD = 'FIFO'
AND df.DELINQUENCY_TYPE_CD = 'PRI'   --IN ('PRI','PRI_CORR')
AND ch.OPEN_DT - EXTRACT(DAY FROM ch.OPEN_DT) BETWEEN df.EFFECTIVE_FROM_DTTM AND df.EFFECTIVE_TO_DTTM
AND df.OVERDUE_RUR_AMT > 0
AND df.DELETED_FLG = 0
LEFT JOIN dlq_rng_old r
ON COALESCE(DPD_OLD,-1) BETWEEN r.RANGE_BEGIN_DAYS_CNT AND r.RANGE_END_DAYS_CNT
QUALIFY ROW_NUMBER() OVER (PARTITION BY df.AGREEMENT_RK ORDER BY df.PROCESSED_DTTM DESC, df.EFFECTIVE_FROM_DTTM DESC) = 1
) WITH DATA;

--реструктуризированые договоры с просрочкой на конец месяца, предшествующего дате реструктуризации
DROP TABLE restr;
CREATE TABLE restr AS (
SELECT MONTH_END(ch.OPEN_DT) AS REPORT_DT, --конец месяца, в котором произошло открытие рестр-и и, одновременно, полное погашение долга по исх. кредиту, который может быть закрыт с лагом в неск. дней
c.AGREEMENT_RK AS PREV_AGREEMENT_RK, c.CLOSE_DT, ch.AGREEMENT_RK AS R_AGREEMENT_RK, ch.AGREEMENT_ID AS R_CONTRACT_ID, 
cln.PRODUCT_OPERATIONAL_ID, cln.PRODUCT_SUB_ID, cln.CONTRACT_AMT AS R_CONTRACT_AMT, r.RANGE_ORDER_NUM AS RANGE_ORDER_NUM_OLD, 
ch.OPEN_DT AS R_DT, ch.OPEN_DT - EXTRACT(DAY FROM ch.OPEN_DT) - df.DELINQUENCY_START_DT AS DPD_OLD, df.OVERDUE_RUR_AMT AS OVERDUE_AMT_OLD
FROM _contract c
INNER JOIN CDM.AGREEMENT_CHAIN_HIST ch
ON SUBSTR(c.PRODUCT_ID, 6,1) = '0' --берем только 080. 057 и 080. 058 - коммерсы
AND c.AGREEMENT_RK = ch.ROOT_AGREEMENT_RK
AND ch.TRANSFORMATION_TYPE_CD LIKE 'RESTR%'
AND ch.DELETED_FLG = '0'
AND ch.IS_ACTIVE_FLG = '1'
AND ch.IS_CURRENT_FLG = '1'
LEFT JOIN DDS.CONTRACT_LN cln
ON ch.AGREEMENT_RK = cln.AGREEMENT_RK
AND cln.CONTRACT_TYPE_CD = 'КРЕДИТ'
AND cln.DELETED_FLG = '0'
LEFT JOIN CDM.FCT_DELINQUENCY df
ON c.AGREEMENT_RK = df.AGREEMENT_RK
AND df.DELINQUENCY_METHOD_CD = 'FIFO'
AND df.DELINQUENCY_TYPE_CD = 'PRI'  --IN ('PRI','PRI_CORR')
AND ch.OPEN_DT - EXTRACT(DAY FROM ch.OPEN_DT) BETWEEN df.EFFECTIVE_FROM_DTTM AND df.EFFECTIVE_TO_DTTM
AND df.OVERDUE_RUR_AMT > 0
AND df.DELETED_FLG = 0
LEFT JOIN dlq_rng_old r
ON COALESCE(DPD_OLD,-1) BETWEEN r.RANGE_BEGIN_DAYS_CNT AND r.RANGE_END_DAYS_CNT
QUALIFY ROW_NUMBER() OVER (PARTITION BY df.AGREEMENT_RK ORDER BY df.PROCESSED_DTTM DESC, df.EFFECTIVE_FROM_DTTM DESC) = 1
) WITH DATA ;

--списанные договоры с просрочкой на конец месяца, предшествующего дате списания
DROP TABLE disposal;
CREATE TABLE disposal AS (
SELECT MONTH_END(d.ENTRY_DT) AS REPORT_DT, --конец месяца, в котором произошло списание
c.AGREEMENT_RK AS DISP_AGREEMENT_RK, c.CONTRACT_ID AS DISP_CONTRACT_ID, d.DISPOSAL_TYPE_CD, d.ENTRY_DT AS DISPOSAL_DT, --дата списания
d.PRI_BALANCE_RUR_AMT, d.INT_BALANCE_RUR_AMT, d.OVERDUE_PRI_BALANCE_RUR_AMT, d.OVERDUE_INT_BALANCE_RUR_AMT, 
d.DISPOSAL_RUR_AMT, d.LOSSES_RUR_AMT, d.RECOVERY_RUR_AMT, r.RANGE_ORDER_NUM AS RANGE_ORDER_NUM_OLD,
d.ENTRY_DT-EXTRACT(DAY FROM d.ENTRY_DT) - df.DELINQUENCY_START_DT AS DPD_OLD, df.OVERDUE_RUR_AMT AS OVERDUE_AMT_OLD
FROM _contract c
INNER JOIN CDM.FCT_LOAN_DISPOSAL d
ON c.AGREEMENT_RK = d.AGREEMENT_RK
AND d.DELETED_FLG = '0'
AND d.IS_ACTIVE_FLG = '1'
LEFT JOIN CDM.FCT_DELINQUENCY df
ON c.AGREEMENT_RK = df.AGREEMENT_RK
AND df.DELINQUENCY_METHOD_CD = 'FIFO'
AND df.DELINQUENCY_TYPE_CD = 'PRI'  --IN ('PRI','PRI_CORR')
AND d.ENTRY_DT-EXTRACT(DAY FROM d.ENTRY_DT) BETWEEN df.EFFECTIVE_FROM_DTTM AND df.EFFECTIVE_TO_DTTM
AND df.OVERDUE_RUR_AMT > 0
AND df.DELETED_FLG = '0'
LEFT JOIN dlq_rng_old r
ON COALESCE(DPD_OLD,-1) BETWEEN r.RANGE_BEGIN_DAYS_CNT AND r.RANGE_END_DAYS_CNT
QUALIFY ROW_NUMBER() OVER (PARTITION BY df.AGREEMENT_RK ORDER BY df.PROCESSED_DTTM DESC, df.EFFECTIVE_FROM_DTTM DESC) = 1
) WITH DATA;

--договоры, размазанные по датам, с балансами
DROP TABLE cts_out;
CREATE TABLE cts_out AS (
SELECT r.report_dt, c.AGREEMENT_RK, c.GENERATION, c.BRANCH_ID, c.CONTRACT_ID, c.CONTRACT_AMT, c.OPEN_DT, 
c.ISSUE_DT, c.CLOSE_DT, c.CLOSE_PLAN_DT, c.PRODUCT_ID, c.SUBPRODUCT_ID, c.CONTRACT_STATUS_CD,
COALESCE(b.PRI_BALANCE_RUR_AMT, 0) + COALESCE(b.OVERDUE_PRI_BALANCE_RUR_AMT, 0) AS DEBT_RUB_PRI,
COALESCE(b.INT_BALANCE_RUR_AMT, 0) + COALESCE(b.OVERDUE_INT_BALANCE_RUR_AMT, 0) AS DEBT_RUB_INT,
o.o_REPORT_DT, o.o_T, o.o_AGREEMENT_RK, o.o_CONTRACT_ID, o.o_DT, o.o_RNG
FROM _report_date1 r
INNER JOIN _contract c
ON r.REPORT_DT BETWEEN c.ISSUE_DT AND MONTH_END( c.CLOSE_DT)
LEFT JOIN CDM.FCT_LOAN_BALANCE b
ON c.AGREEMENT_RK = b.AGREEMENT_RK
AND r.REPORT_DT <= b.EFFECTIVE_TO_DTTM
AND b.DELETED_FLG = '0'
LEFT JOIN (
SELECT m.REPORT_DT AS o_REPORT_DT, 'M' AS o_T, m.PREV_AGREEMENT_RK AS PREV_AGREEMENT_RK, m.MIGR_AGREEMENT_RK AS o_AGREEMENT_RK, m.MIGR_CONTRACT_ID AS o_CONTRACT_ID, m.MIGRATION_DT AS o_DT, m.RANGE_ORDER_NUM_OLD AS o_RNG FROM migration m
UNION
SELECT r.REPORT_DT AS o_REPORT_DT, 'R' AS o_T, r.PREV_AGREEMENT_RK AS PREV_AGREEMENT_RK, r.R_AGREEMENT_RK AS o_AGREEMENT_RK, r.R_CONTRACT_ID AS o_CONTRACT_ID, r.R_DT AS o_DT, r.RANGE_ORDER_NUM_OLD AS o_RNG FROM restr r
UNION
SELECT d.REPORT_DT AS o_REPORT_DT, 'D' AS o_T, d.DISP_AGREEMENT_RK AS PREV_AGREEMENT_RK, d.DISP_AGREEMENT_RK AS o_AGREEMENT_RK, d.DISPOSAL_TYPE_CD AS o_CONTRACT_ID, d.DISPOSAL_DT AS o_DT, d.RANGE_ORDER_NUM_OLD AS o_RNG FROM disposal d
) o
ON c.AGREEMENT_RK = o.PREV_AGREEMENT_RK AND r.REPORT_DT = o.o_REPORT_DT
QUALIFY ROW_NUMBER() OVER (PARTITION BY c.AGREEMENT_RK, r.REPORT_DT ORDER BY b.EFFECTIVE_TO_DTTM) = 1
) WITH DATA;

ALTER TABLE cts_out ADD OVERDUE_AMT INTEGER DEFAULT NULL, ADD DPD INTEGER DEFAULT NULL, ADD DLQ_START_DT DATE DEFAULT NULL, ADD BKT INTEGER DEFAULT NULL;

UPDATE cts_out 
FROM (
SELECT c.AGREEMENT_RK, c.REPORT_DT, df.DELINQUENCY_START_DT, c.REPORT_DT - df.DELINQUENCY_START_DT AS DPD,
CASE WHEN c.REPORT_DT >= c.CLOSE_DT THEN 0 ELSE r.RANGE_ORDER_NUM END AS RANGE_ORDER_NUM, df.OVERDUE_RUR_AMT
FROM 
(SELECT DISTINCT c.AGREEMENT_RK, c.REPORT_DT, c.CLOSE_DT 
FROM cts_out c
) c
LEFT JOIN (
SELECT df.AGREEMENT_RK, df.DELINQUENCY_START_DT, df.OVERDUE_RUR_AMT, df.EFFECTIVE_FROM_DTTM, df.EFFECTIVE_TO_DTTM, df.PROCESSED_DTTM
FROM CDM.FCT_DELINQUENCY df
WHERE df.DELINQUENCY_METHOD_CD = 'FIFO'
AND df.DELINQUENCY_TYPE_CD = 'PRI'  --IN ('PRI','PRI_CORR')
AND df.OVERDUE_RUR_AMT > 0
AND df.DELETED_FLG = 0
) df
ON c.AGREEMENT_RK = df.AGREEMENT_RK
AND c.REPORT_DT BETWEEN df.EFFECTIVE_FROM_DTTM AND df.EFFECTIVE_TO_DTTM
LEFT JOIN dlq_rng_old r
ON COALESCE(DPD,-1) BETWEEN r.RANGE_BEGIN_DAYS_CNT AND r.RANGE_END_DAYS_CNT
QUALIFY ROW_NUMBER() OVER (PARTITION BY c.REPORT_DT, c.AGREEMENT_RK ORDER BY df.EFFECTIVE_FROM_DTTM DESC, df.PROCESSED_DTTM DESC) = 1
) cc
SET OVERDUE_AMT = cc.OVERDUE_RUR_AMT,
DPD = cc.DPD,
DLQ_START_DT = cc.DELINQUENCY_START_DT,
BKT = cc.RANGE_ORDER_NUM
WHERE cts_out.AGREEMENT_RK = cc.AGREEMENT_RK 
AND cts_out.REPORT_DT = cc.REPORT_DT;

DROP TABLE cts_roll;--сюда добавить customer_rk, чтобы partition сделать.
CREATE TABLE cts_roll AS (
SELECT c.REPORT_DT, c.AGREEMENT_RK, c.GENERATION, c.BRANCH_ID, c.CONTRACT_ID, c.CONTRACT_AMT, c.PRODUCT_ID, c.SUBPRODUCT_ID, c.CLOSE_DT,
c.DEBT_RUB_PRI, c.DEBT_RUB_INT, c.OVERDUE_AMT, c.DPD, COALESCE(CASE WHEN c.o_T = 'R' THEN 10 WHEN c.o_T = 'D' THEN 9 ELSE NULL END, c.BKT) AS BKT,
COALESCE(MAX(c.DEBT_RUB_PRI) OVER (PARTITION BY c.AGREEMENT_RK ORDER BY c.REPORT_DT ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING), 0) AS DEBT_PRI_OLD, 
COALESCE(MAX(c.DEBT_RUB_INT) OVER (PARTITION BY c.AGREEMENT_RK ORDER BY c.REPORT_DT ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING), 0) AS DEBT_INT_OLD, 
COALESCE(MAX(c.OVERDUE_AMT) OVER (PARTITION BY c.AGREEMENT_RK ORDER BY c.REPORT_DT ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING), 0) AS OVERDUE_OLD, 
COALESCE(MAX(c.DPD) OVER (PARTITION BY c.AGREEMENT_RK ORDER BY c.REPORT_DT ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING), -1) AS DPD_OLD, 
COALESCE(MAX(c.BKT) OVER (PARTITION BY c.AGREEMENT_RK ORDER BY c.REPORT_DT ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING), 1) AS BKT_OLD 
FROM cts_out c
GROUP BY c.REPORT_DT, c.AGREEMENT_RK, c.GENERATION, c.BRANCH_ID, c.CONTRACT_ID, c.CONTRACT_AMT, c.PRODUCT_ID, 
c.SUBPRODUCT_ID, c.CLOSE_DT, c.DEBT_RUB_PRI, c.DEBT_RUB_INT, c.OVERDUE_AMT, c.DPD, c.o_T,c.BKT
) WITH DATA;

--SEL * FROM cts_roll WHERE report_dt = DATE '2016-05-31'
--------------------
--DROP TABLE dlq_rng_old; DROP TABLE _contract; DROP TABLE migration; DROP TABLE restr; DROP TABLE disposal; DROP TABLE cts_out;

DROP TABLE cts_hist;
CREATE TABLE cts_hist AS (
SELECT REPORT_DT, AGREEMENT_RK, GENERATION, PRODUCT_ID, DEBT_RUB_PRI, DEBT_RUB_INT, OVERDUE_AMT, DPD, BKT, DEBT_PRI_OLD, DEBT_INT_OLD, OVERDUE_OLD, DPD_OLD, BKT_OLD
FROM cts_roll
) WITH DATA UNIQUE PRIMARY INDEX (REPORT_DT, AGREEMENT_RK)
PARTITION BY report_dt;

	
